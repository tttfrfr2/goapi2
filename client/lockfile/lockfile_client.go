// Code generated by go-swagger; DO NOT EDIT.

package lockfile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new lockfile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lockfile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LockfileAddLockfile(params *LockfileAddLockfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileAddLockfileOK, error)

	LockfileDeleteLockfile(params *LockfileDeleteLockfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileDeleteLockfileOK, error)

	LockfileGetLockfileDetail(params *LockfileGetLockfileDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileGetLockfileDetailOK, error)

	LockfileGetLockfileList(params *LockfileGetLockfileListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileGetLockfileListOK, error)

	LockfileUpdateLockfile(params *LockfileUpdateLockfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileUpdateLockfileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LockfileAddLockfile adds lockfile lockfile

  add lockfile
*/
func (a *Client) LockfileAddLockfile(params *LockfileAddLockfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileAddLockfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockfileAddLockfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lockfile#addLockfile",
		Method:             "POST",
		PathPattern:        "/v1/lockfile",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LockfileAddLockfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockfileAddLockfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lockfile#addLockfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LockfileDeleteLockfile deletes lockfile lockfile

  lockfile delete
*/
func (a *Client) LockfileDeleteLockfile(params *LockfileDeleteLockfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileDeleteLockfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockfileDeleteLockfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lockfile#deleteLockfile",
		Method:             "DELETE",
		PathPattern:        "/v1/lockfile/{lockfileID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LockfileDeleteLockfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockfileDeleteLockfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lockfile#deleteLockfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LockfileGetLockfileDetail gets lockfile detail lockfile

  lockfile detail
*/
func (a *Client) LockfileGetLockfileDetail(params *LockfileGetLockfileDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileGetLockfileDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockfileGetLockfileDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lockfile#getLockfileDetail",
		Method:             "GET",
		PathPattern:        "/v1/lockfile/{lockfileID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LockfileGetLockfileDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockfileGetLockfileDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lockfile#getLockfileDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LockfileGetLockfileList gets lockfile list lockfile

  lockfile list
*/
func (a *Client) LockfileGetLockfileList(params *LockfileGetLockfileListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileGetLockfileListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockfileGetLockfileListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lockfile#getLockfileList",
		Method:             "GET",
		PathPattern:        "/v1/lockfiles",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LockfileGetLockfileListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockfileGetLockfileListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lockfile#getLockfileList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LockfileUpdateLockfile updates lockfile lockfile

  update lockfile
*/
func (a *Client) LockfileUpdateLockfile(params *LockfileUpdateLockfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockfileUpdateLockfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockfileUpdateLockfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lockfile#updateLockfile",
		Method:             "PUT",
		PathPattern:        "/v1/lockfile/{lockfileID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LockfileUpdateLockfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockfileUpdateLockfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lockfile#updateLockfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package cve

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCveGetCveListParams creates a new CveGetCveListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCveGetCveListParams() *CveGetCveListParams {
	return &CveGetCveListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCveGetCveListParamsWithTimeout creates a new CveGetCveListParams object
// with the ability to set a timeout on a request.
func NewCveGetCveListParamsWithTimeout(timeout time.Duration) *CveGetCveListParams {
	return &CveGetCveListParams{
		timeout: timeout,
	}
}

// NewCveGetCveListParamsWithContext creates a new CveGetCveListParams object
// with the ability to set a context for a request.
func NewCveGetCveListParamsWithContext(ctx context.Context) *CveGetCveListParams {
	return &CveGetCveListParams{
		Context: ctx,
	}
}

// NewCveGetCveListParamsWithHTTPClient creates a new CveGetCveListParams object
// with the ability to set a custom HTTPClient for a request.
func NewCveGetCveListParamsWithHTTPClient(client *http.Client) *CveGetCveListParams {
	return &CveGetCveListParams{
		HTTPClient: client,
	}
}

/* CveGetCveListParams contains all the parameters to send to the API endpoint
   for the cve get cve list operation.

   Typically these are written to a http.Request.
*/
type CveGetCveListParams struct {

	/* Authorization.

	   api key auth
	*/
	Authorization *string

	/* FilterCpeID.

	   CpeID filter
	*/
	FilterCpeID *int64

	/* FilterPkgID.

	   PackageID filter
	*/
	FilterPkgID *int64

	/* FilterRoleID.

	   ServerRoleID filter
	*/
	FilterRoleID *int64

	/* FilterServerID.

	   ServerID filter
	*/
	FilterServerID *int64

	/* Limit.

	   Limit

	   Default: 20
	*/
	Limit *int64

	/* Offset.

	   Offset
	*/
	Offset *int64

	/* Page.

	   Page Number

	   Default: 1
	*/
	Page *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cve get cve list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CveGetCveListParams) WithDefaults() *CveGetCveListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cve get cve list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CveGetCveListParams) SetDefaults() {
	var (
		limitDefault = int64(20)

		offsetDefault = int64(0)

		pageDefault = int64(1)
	)

	val := CveGetCveListParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
		Page:   &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cve get cve list params
func (o *CveGetCveListParams) WithTimeout(timeout time.Duration) *CveGetCveListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cve get cve list params
func (o *CveGetCveListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cve get cve list params
func (o *CveGetCveListParams) WithContext(ctx context.Context) *CveGetCveListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cve get cve list params
func (o *CveGetCveListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cve get cve list params
func (o *CveGetCveListParams) WithHTTPClient(client *http.Client) *CveGetCveListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cve get cve list params
func (o *CveGetCveListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the cve get cve list params
func (o *CveGetCveListParams) WithAuthorization(authorization *string) *CveGetCveListParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the cve get cve list params
func (o *CveGetCveListParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithFilterCpeID adds the filterCpeID to the cve get cve list params
func (o *CveGetCveListParams) WithFilterCpeID(filterCpeID *int64) *CveGetCveListParams {
	o.SetFilterCpeID(filterCpeID)
	return o
}

// SetFilterCpeID adds the filterCpeId to the cve get cve list params
func (o *CveGetCveListParams) SetFilterCpeID(filterCpeID *int64) {
	o.FilterCpeID = filterCpeID
}

// WithFilterPkgID adds the filterPkgID to the cve get cve list params
func (o *CveGetCveListParams) WithFilterPkgID(filterPkgID *int64) *CveGetCveListParams {
	o.SetFilterPkgID(filterPkgID)
	return o
}

// SetFilterPkgID adds the filterPkgId to the cve get cve list params
func (o *CveGetCveListParams) SetFilterPkgID(filterPkgID *int64) {
	o.FilterPkgID = filterPkgID
}

// WithFilterRoleID adds the filterRoleID to the cve get cve list params
func (o *CveGetCveListParams) WithFilterRoleID(filterRoleID *int64) *CveGetCveListParams {
	o.SetFilterRoleID(filterRoleID)
	return o
}

// SetFilterRoleID adds the filterRoleId to the cve get cve list params
func (o *CveGetCveListParams) SetFilterRoleID(filterRoleID *int64) {
	o.FilterRoleID = filterRoleID
}

// WithFilterServerID adds the filterServerID to the cve get cve list params
func (o *CveGetCveListParams) WithFilterServerID(filterServerID *int64) *CveGetCveListParams {
	o.SetFilterServerID(filterServerID)
	return o
}

// SetFilterServerID adds the filterServerId to the cve get cve list params
func (o *CveGetCveListParams) SetFilterServerID(filterServerID *int64) {
	o.FilterServerID = filterServerID
}

// WithLimit adds the limit to the cve get cve list params
func (o *CveGetCveListParams) WithLimit(limit *int64) *CveGetCveListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the cve get cve list params
func (o *CveGetCveListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the cve get cve list params
func (o *CveGetCveListParams) WithOffset(offset *int64) *CveGetCveListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the cve get cve list params
func (o *CveGetCveListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPage adds the page to the cve get cve list params
func (o *CveGetCveListParams) WithPage(page *int64) *CveGetCveListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the cve get cve list params
func (o *CveGetCveListParams) SetPage(page *int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *CveGetCveListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}

	if o.FilterCpeID != nil {

		// query param filterCpeID
		var qrFilterCpeID int64

		if o.FilterCpeID != nil {
			qrFilterCpeID = *o.FilterCpeID
		}
		qFilterCpeID := swag.FormatInt64(qrFilterCpeID)
		if qFilterCpeID != "" {

			if err := r.SetQueryParam("filterCpeID", qFilterCpeID); err != nil {
				return err
			}
		}
	}

	if o.FilterPkgID != nil {

		// query param filterPkgID
		var qrFilterPkgID int64

		if o.FilterPkgID != nil {
			qrFilterPkgID = *o.FilterPkgID
		}
		qFilterPkgID := swag.FormatInt64(qrFilterPkgID)
		if qFilterPkgID != "" {

			if err := r.SetQueryParam("filterPkgID", qFilterPkgID); err != nil {
				return err
			}
		}
	}

	if o.FilterRoleID != nil {

		// query param filterRoleID
		var qrFilterRoleID int64

		if o.FilterRoleID != nil {
			qrFilterRoleID = *o.FilterRoleID
		}
		qFilterRoleID := swag.FormatInt64(qrFilterRoleID)
		if qFilterRoleID != "" {

			if err := r.SetQueryParam("filterRoleID", qFilterRoleID); err != nil {
				return err
			}
		}
	}

	if o.FilterServerID != nil {

		// query param filterServerID
		var qrFilterServerID int64

		if o.FilterServerID != nil {
			qrFilterServerID = *o.FilterServerID
		}
		qFilterServerID := swag.FormatInt64(qrFilterServerID)
		if qFilterServerID != "" {

			if err := r.SetQueryParam("filterServerID", qFilterServerID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

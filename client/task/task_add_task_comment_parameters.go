// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/tttfrfr2/tempfiles/openapi/gen/models"
)

// NewTaskAddTaskCommentParams creates a new TaskAddTaskCommentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTaskAddTaskCommentParams() *TaskAddTaskCommentParams {
	return &TaskAddTaskCommentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTaskAddTaskCommentParamsWithTimeout creates a new TaskAddTaskCommentParams object
// with the ability to set a timeout on a request.
func NewTaskAddTaskCommentParamsWithTimeout(timeout time.Duration) *TaskAddTaskCommentParams {
	return &TaskAddTaskCommentParams{
		timeout: timeout,
	}
}

// NewTaskAddTaskCommentParamsWithContext creates a new TaskAddTaskCommentParams object
// with the ability to set a context for a request.
func NewTaskAddTaskCommentParamsWithContext(ctx context.Context) *TaskAddTaskCommentParams {
	return &TaskAddTaskCommentParams{
		Context: ctx,
	}
}

// NewTaskAddTaskCommentParamsWithHTTPClient creates a new TaskAddTaskCommentParams object
// with the ability to set a custom HTTPClient for a request.
func NewTaskAddTaskCommentParamsWithHTTPClient(client *http.Client) *TaskAddTaskCommentParams {
	return &TaskAddTaskCommentParams{
		HTTPClient: client,
	}
}

/* TaskAddTaskCommentParams contains all the parameters to send to the API endpoint
   for the task add task comment operation.

   Typically these are written to a http.Request.
*/
type TaskAddTaskCommentParams struct {

	// AddTaskCommentRequestBody.
	AddTaskCommentRequestBody *models.TaskAddTaskCommentRequestBody

	/* Authorization.

	   api key auth
	*/
	Authorization *string

	/* TaskID.

	   Task ID

	   Format: int64
	*/
	TaskID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the task add task comment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TaskAddTaskCommentParams) WithDefaults() *TaskAddTaskCommentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the task add task comment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TaskAddTaskCommentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the task add task comment params
func (o *TaskAddTaskCommentParams) WithTimeout(timeout time.Duration) *TaskAddTaskCommentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the task add task comment params
func (o *TaskAddTaskCommentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the task add task comment params
func (o *TaskAddTaskCommentParams) WithContext(ctx context.Context) *TaskAddTaskCommentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the task add task comment params
func (o *TaskAddTaskCommentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the task add task comment params
func (o *TaskAddTaskCommentParams) WithHTTPClient(client *http.Client) *TaskAddTaskCommentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the task add task comment params
func (o *TaskAddTaskCommentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddTaskCommentRequestBody adds the addTaskCommentRequestBody to the task add task comment params
func (o *TaskAddTaskCommentParams) WithAddTaskCommentRequestBody(addTaskCommentRequestBody *models.TaskAddTaskCommentRequestBody) *TaskAddTaskCommentParams {
	o.SetAddTaskCommentRequestBody(addTaskCommentRequestBody)
	return o
}

// SetAddTaskCommentRequestBody adds the addTaskCommentRequestBody to the task add task comment params
func (o *TaskAddTaskCommentParams) SetAddTaskCommentRequestBody(addTaskCommentRequestBody *models.TaskAddTaskCommentRequestBody) {
	o.AddTaskCommentRequestBody = addTaskCommentRequestBody
}

// WithAuthorization adds the authorization to the task add task comment params
func (o *TaskAddTaskCommentParams) WithAuthorization(authorization *string) *TaskAddTaskCommentParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the task add task comment params
func (o *TaskAddTaskCommentParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithTaskID adds the taskID to the task add task comment params
func (o *TaskAddTaskCommentParams) WithTaskID(taskID int64) *TaskAddTaskCommentParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the task add task comment params
func (o *TaskAddTaskCommentParams) SetTaskID(taskID int64) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *TaskAddTaskCommentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.AddTaskCommentRequestBody != nil {
		if err := r.SetBodyParam(o.AddTaskCommentRequestBody); err != nil {
			return err
		}
	}

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}

	// path param taskID
	if err := r.SetPathParam("taskID", swag.FormatInt64(o.TaskID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

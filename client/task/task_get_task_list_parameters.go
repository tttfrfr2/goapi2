// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTaskGetTaskListParams creates a new TaskGetTaskListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTaskGetTaskListParams() *TaskGetTaskListParams {
	return &TaskGetTaskListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTaskGetTaskListParamsWithTimeout creates a new TaskGetTaskListParams object
// with the ability to set a timeout on a request.
func NewTaskGetTaskListParamsWithTimeout(timeout time.Duration) *TaskGetTaskListParams {
	return &TaskGetTaskListParams{
		timeout: timeout,
	}
}

// NewTaskGetTaskListParamsWithContext creates a new TaskGetTaskListParams object
// with the ability to set a context for a request.
func NewTaskGetTaskListParamsWithContext(ctx context.Context) *TaskGetTaskListParams {
	return &TaskGetTaskListParams{
		Context: ctx,
	}
}

// NewTaskGetTaskListParamsWithHTTPClient creates a new TaskGetTaskListParams object
// with the ability to set a custom HTTPClient for a request.
func NewTaskGetTaskListParamsWithHTTPClient(client *http.Client) *TaskGetTaskListParams {
	return &TaskGetTaskListParams{
		HTTPClient: client,
	}
}

/* TaskGetTaskListParams contains all the parameters to send to the API endpoint
   for the task get task list operation.

   Typically these are written to a http.Request.
*/
type TaskGetTaskListParams struct {

	/* Authorization.

	   api key auth
	*/
	Authorization *string

	/* FilterCpeID.

	   CpeID filter
	*/
	FilterCpeID *int64

	/* FilterCveID.

	   CveID filter
	*/
	FilterCveID *string

	/* FilterIgnore.

	   Ignore filter(trueの場合は、非表示のものを取得しない。falseの場合は全件取得)
	*/
	FilterIgnore *bool

	/* FilterMainUserIDs.

	   MainUserIDs filter
	*/
	FilterMainUserIDs []int64

	/* FilterPkgID.

	   PackageID filter
	*/
	FilterPkgID *int64

	/* FilterPriority.

	   Priority filter
	*/
	FilterPriority []string

	/* FilterRoleID.

	   ServerRoleID filter
	*/
	FilterRoleID *int64

	/* FilterServerID.

	   ServerID filter
	*/
	FilterServerID *int64

	/* FilterStatus.

	   Status filter

	   Default: ["new","investigating","ongoing"]
	*/
	FilterStatus []string

	/* FilterSubUserIDs.

	   SubUserIDs filter
	*/
	FilterSubUserIDs []int64

	/* Limit.

	   Limit

	   Default: 20
	*/
	Limit *int64

	/* Offset.

	   Offset
	*/
	Offset *int64

	/* Page.

	   Page Number

	   Default: 1
	*/
	Page *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the task get task list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TaskGetTaskListParams) WithDefaults() *TaskGetTaskListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the task get task list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TaskGetTaskListParams) SetDefaults() {
	var (
		filterStatusDefault = []string{"new", "investigating", "ongoing"}

		limitDefault = int64(20)

		offsetDefault = int64(0)

		pageDefault = int64(1)
	)

	val := TaskGetTaskListParams{
		FilterStatus: filterStatusDefault,
		Limit:        &limitDefault,
		Offset:       &offsetDefault,
		Page:         &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the task get task list params
func (o *TaskGetTaskListParams) WithTimeout(timeout time.Duration) *TaskGetTaskListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the task get task list params
func (o *TaskGetTaskListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the task get task list params
func (o *TaskGetTaskListParams) WithContext(ctx context.Context) *TaskGetTaskListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the task get task list params
func (o *TaskGetTaskListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the task get task list params
func (o *TaskGetTaskListParams) WithHTTPClient(client *http.Client) *TaskGetTaskListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the task get task list params
func (o *TaskGetTaskListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the task get task list params
func (o *TaskGetTaskListParams) WithAuthorization(authorization *string) *TaskGetTaskListParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the task get task list params
func (o *TaskGetTaskListParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithFilterCpeID adds the filterCpeID to the task get task list params
func (o *TaskGetTaskListParams) WithFilterCpeID(filterCpeID *int64) *TaskGetTaskListParams {
	o.SetFilterCpeID(filterCpeID)
	return o
}

// SetFilterCpeID adds the filterCpeId to the task get task list params
func (o *TaskGetTaskListParams) SetFilterCpeID(filterCpeID *int64) {
	o.FilterCpeID = filterCpeID
}

// WithFilterCveID adds the filterCveID to the task get task list params
func (o *TaskGetTaskListParams) WithFilterCveID(filterCveID *string) *TaskGetTaskListParams {
	o.SetFilterCveID(filterCveID)
	return o
}

// SetFilterCveID adds the filterCveId to the task get task list params
func (o *TaskGetTaskListParams) SetFilterCveID(filterCveID *string) {
	o.FilterCveID = filterCveID
}

// WithFilterIgnore adds the filterIgnore to the task get task list params
func (o *TaskGetTaskListParams) WithFilterIgnore(filterIgnore *bool) *TaskGetTaskListParams {
	o.SetFilterIgnore(filterIgnore)
	return o
}

// SetFilterIgnore adds the filterIgnore to the task get task list params
func (o *TaskGetTaskListParams) SetFilterIgnore(filterIgnore *bool) {
	o.FilterIgnore = filterIgnore
}

// WithFilterMainUserIDs adds the filterMainUserIDs to the task get task list params
func (o *TaskGetTaskListParams) WithFilterMainUserIDs(filterMainUserIDs []int64) *TaskGetTaskListParams {
	o.SetFilterMainUserIDs(filterMainUserIDs)
	return o
}

// SetFilterMainUserIDs adds the filterMainUserIDs to the task get task list params
func (o *TaskGetTaskListParams) SetFilterMainUserIDs(filterMainUserIDs []int64) {
	o.FilterMainUserIDs = filterMainUserIDs
}

// WithFilterPkgID adds the filterPkgID to the task get task list params
func (o *TaskGetTaskListParams) WithFilterPkgID(filterPkgID *int64) *TaskGetTaskListParams {
	o.SetFilterPkgID(filterPkgID)
	return o
}

// SetFilterPkgID adds the filterPkgId to the task get task list params
func (o *TaskGetTaskListParams) SetFilterPkgID(filterPkgID *int64) {
	o.FilterPkgID = filterPkgID
}

// WithFilterPriority adds the filterPriority to the task get task list params
func (o *TaskGetTaskListParams) WithFilterPriority(filterPriority []string) *TaskGetTaskListParams {
	o.SetFilterPriority(filterPriority)
	return o
}

// SetFilterPriority adds the filterPriority to the task get task list params
func (o *TaskGetTaskListParams) SetFilterPriority(filterPriority []string) {
	o.FilterPriority = filterPriority
}

// WithFilterRoleID adds the filterRoleID to the task get task list params
func (o *TaskGetTaskListParams) WithFilterRoleID(filterRoleID *int64) *TaskGetTaskListParams {
	o.SetFilterRoleID(filterRoleID)
	return o
}

// SetFilterRoleID adds the filterRoleId to the task get task list params
func (o *TaskGetTaskListParams) SetFilterRoleID(filterRoleID *int64) {
	o.FilterRoleID = filterRoleID
}

// WithFilterServerID adds the filterServerID to the task get task list params
func (o *TaskGetTaskListParams) WithFilterServerID(filterServerID *int64) *TaskGetTaskListParams {
	o.SetFilterServerID(filterServerID)
	return o
}

// SetFilterServerID adds the filterServerId to the task get task list params
func (o *TaskGetTaskListParams) SetFilterServerID(filterServerID *int64) {
	o.FilterServerID = filterServerID
}

// WithFilterStatus adds the filterStatus to the task get task list params
func (o *TaskGetTaskListParams) WithFilterStatus(filterStatus []string) *TaskGetTaskListParams {
	o.SetFilterStatus(filterStatus)
	return o
}

// SetFilterStatus adds the filterStatus to the task get task list params
func (o *TaskGetTaskListParams) SetFilterStatus(filterStatus []string) {
	o.FilterStatus = filterStatus
}

// WithFilterSubUserIDs adds the filterSubUserIDs to the task get task list params
func (o *TaskGetTaskListParams) WithFilterSubUserIDs(filterSubUserIDs []int64) *TaskGetTaskListParams {
	o.SetFilterSubUserIDs(filterSubUserIDs)
	return o
}

// SetFilterSubUserIDs adds the filterSubUserIDs to the task get task list params
func (o *TaskGetTaskListParams) SetFilterSubUserIDs(filterSubUserIDs []int64) {
	o.FilterSubUserIDs = filterSubUserIDs
}

// WithLimit adds the limit to the task get task list params
func (o *TaskGetTaskListParams) WithLimit(limit *int64) *TaskGetTaskListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the task get task list params
func (o *TaskGetTaskListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the task get task list params
func (o *TaskGetTaskListParams) WithOffset(offset *int64) *TaskGetTaskListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the task get task list params
func (o *TaskGetTaskListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPage adds the page to the task get task list params
func (o *TaskGetTaskListParams) WithPage(page *int64) *TaskGetTaskListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the task get task list params
func (o *TaskGetTaskListParams) SetPage(page *int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *TaskGetTaskListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}

	if o.FilterCpeID != nil {

		// query param filterCpeID
		var qrFilterCpeID int64

		if o.FilterCpeID != nil {
			qrFilterCpeID = *o.FilterCpeID
		}
		qFilterCpeID := swag.FormatInt64(qrFilterCpeID)
		if qFilterCpeID != "" {

			if err := r.SetQueryParam("filterCpeID", qFilterCpeID); err != nil {
				return err
			}
		}
	}

	if o.FilterCveID != nil {

		// query param filterCveID
		var qrFilterCveID string

		if o.FilterCveID != nil {
			qrFilterCveID = *o.FilterCveID
		}
		qFilterCveID := qrFilterCveID
		if qFilterCveID != "" {

			if err := r.SetQueryParam("filterCveID", qFilterCveID); err != nil {
				return err
			}
		}
	}

	if o.FilterIgnore != nil {

		// query param filterIgnore
		var qrFilterIgnore bool

		if o.FilterIgnore != nil {
			qrFilterIgnore = *o.FilterIgnore
		}
		qFilterIgnore := swag.FormatBool(qrFilterIgnore)
		if qFilterIgnore != "" {

			if err := r.SetQueryParam("filterIgnore", qFilterIgnore); err != nil {
				return err
			}
		}
	}

	if o.FilterMainUserIDs != nil {

		// binding items for filterMainUserIDs
		joinedFilterMainUserIDs := o.bindParamFilterMainUserIDs(reg)

		// query array param filterMainUserIDs
		if err := r.SetQueryParam("filterMainUserIDs", joinedFilterMainUserIDs...); err != nil {
			return err
		}
	}

	if o.FilterPkgID != nil {

		// query param filterPkgID
		var qrFilterPkgID int64

		if o.FilterPkgID != nil {
			qrFilterPkgID = *o.FilterPkgID
		}
		qFilterPkgID := swag.FormatInt64(qrFilterPkgID)
		if qFilterPkgID != "" {

			if err := r.SetQueryParam("filterPkgID", qFilterPkgID); err != nil {
				return err
			}
		}
	}

	if o.FilterPriority != nil {

		// binding items for filterPriority
		joinedFilterPriority := o.bindParamFilterPriority(reg)

		// query array param filterPriority
		if err := r.SetQueryParam("filterPriority", joinedFilterPriority...); err != nil {
			return err
		}
	}

	if o.FilterRoleID != nil {

		// query param filterRoleID
		var qrFilterRoleID int64

		if o.FilterRoleID != nil {
			qrFilterRoleID = *o.FilterRoleID
		}
		qFilterRoleID := swag.FormatInt64(qrFilterRoleID)
		if qFilterRoleID != "" {

			if err := r.SetQueryParam("filterRoleID", qFilterRoleID); err != nil {
				return err
			}
		}
	}

	if o.FilterServerID != nil {

		// query param filterServerID
		var qrFilterServerID int64

		if o.FilterServerID != nil {
			qrFilterServerID = *o.FilterServerID
		}
		qFilterServerID := swag.FormatInt64(qrFilterServerID)
		if qFilterServerID != "" {

			if err := r.SetQueryParam("filterServerID", qFilterServerID); err != nil {
				return err
			}
		}
	}

	if o.FilterStatus != nil {

		// binding items for filterStatus
		joinedFilterStatus := o.bindParamFilterStatus(reg)

		// query array param filterStatus
		if err := r.SetQueryParam("filterStatus", joinedFilterStatus...); err != nil {
			return err
		}
	}

	if o.FilterSubUserIDs != nil {

		// binding items for filterSubUserIDs
		joinedFilterSubUserIDs := o.bindParamFilterSubUserIDs(reg)

		// query array param filterSubUserIDs
		if err := r.SetQueryParam("filterSubUserIDs", joinedFilterSubUserIDs...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamTaskGetTaskList binds the parameter filterMainUserIDs
func (o *TaskGetTaskListParams) bindParamFilterMainUserIDs(formats strfmt.Registry) []string {
	filterMainUserIDsIR := o.FilterMainUserIDs

	var filterMainUserIDsIC []string
	for _, filterMainUserIDsIIR := range filterMainUserIDsIR { // explode []int64

		filterMainUserIDsIIV := swag.FormatInt64(filterMainUserIDsIIR) // int64 as string
		filterMainUserIDsIC = append(filterMainUserIDsIC, filterMainUserIDsIIV)
	}

	// items.CollectionFormat: "multi"
	filterMainUserIDsIS := swag.JoinByFormat(filterMainUserIDsIC, "multi")

	return filterMainUserIDsIS
}

// bindParamTaskGetTaskList binds the parameter filterPriority
func (o *TaskGetTaskListParams) bindParamFilterPriority(formats strfmt.Registry) []string {
	filterPriorityIR := o.FilterPriority

	var filterPriorityIC []string
	for _, filterPriorityIIR := range filterPriorityIR { // explode []string

		filterPriorityIIV := filterPriorityIIR // string as string
		filterPriorityIC = append(filterPriorityIC, filterPriorityIIV)
	}

	// items.CollectionFormat: "multi"
	filterPriorityIS := swag.JoinByFormat(filterPriorityIC, "multi")

	return filterPriorityIS
}

// bindParamTaskGetTaskList binds the parameter filterStatus
func (o *TaskGetTaskListParams) bindParamFilterStatus(formats strfmt.Registry) []string {
	filterStatusIR := o.FilterStatus

	var filterStatusIC []string
	for _, filterStatusIIR := range filterStatusIR { // explode []string

		filterStatusIIV := filterStatusIIR // string as string
		filterStatusIC = append(filterStatusIC, filterStatusIIV)
	}

	// items.CollectionFormat: "multi"
	filterStatusIS := swag.JoinByFormat(filterStatusIC, "multi")

	return filterStatusIS
}

// bindParamTaskGetTaskList binds the parameter filterSubUserIDs
func (o *TaskGetTaskListParams) bindParamFilterSubUserIDs(formats strfmt.Registry) []string {
	filterSubUserIDsIR := o.FilterSubUserIDs

	var filterSubUserIDsIC []string
	for _, filterSubUserIDsIIR := range filterSubUserIDsIR { // explode []int64

		filterSubUserIDsIIV := swag.FormatInt64(filterSubUserIDsIIR) // int64 as string
		filterSubUserIDsIC = append(filterSubUserIDsIC, filterSubUserIDsIIV)
	}

	// items.CollectionFormat: "multi"
	filterSubUserIDsIS := swag.JoinByFormat(filterSubUserIDsIC, "multi")

	return filterSubUserIDsIS
}

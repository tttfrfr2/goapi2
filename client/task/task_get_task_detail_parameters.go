// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTaskGetTaskDetailParams creates a new TaskGetTaskDetailParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTaskGetTaskDetailParams() *TaskGetTaskDetailParams {
	return &TaskGetTaskDetailParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTaskGetTaskDetailParamsWithTimeout creates a new TaskGetTaskDetailParams object
// with the ability to set a timeout on a request.
func NewTaskGetTaskDetailParamsWithTimeout(timeout time.Duration) *TaskGetTaskDetailParams {
	return &TaskGetTaskDetailParams{
		timeout: timeout,
	}
}

// NewTaskGetTaskDetailParamsWithContext creates a new TaskGetTaskDetailParams object
// with the ability to set a context for a request.
func NewTaskGetTaskDetailParamsWithContext(ctx context.Context) *TaskGetTaskDetailParams {
	return &TaskGetTaskDetailParams{
		Context: ctx,
	}
}

// NewTaskGetTaskDetailParamsWithHTTPClient creates a new TaskGetTaskDetailParams object
// with the ability to set a custom HTTPClient for a request.
func NewTaskGetTaskDetailParamsWithHTTPClient(client *http.Client) *TaskGetTaskDetailParams {
	return &TaskGetTaskDetailParams{
		HTTPClient: client,
	}
}

/* TaskGetTaskDetailParams contains all the parameters to send to the API endpoint
   for the task get task detail operation.

   Typically these are written to a http.Request.
*/
type TaskGetTaskDetailParams struct {

	/* Authorization.

	   api key auth
	*/
	Authorization *string

	/* TaskID.

	   Task ID

	   Format: int64
	*/
	TaskID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the task get task detail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TaskGetTaskDetailParams) WithDefaults() *TaskGetTaskDetailParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the task get task detail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TaskGetTaskDetailParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the task get task detail params
func (o *TaskGetTaskDetailParams) WithTimeout(timeout time.Duration) *TaskGetTaskDetailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the task get task detail params
func (o *TaskGetTaskDetailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the task get task detail params
func (o *TaskGetTaskDetailParams) WithContext(ctx context.Context) *TaskGetTaskDetailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the task get task detail params
func (o *TaskGetTaskDetailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the task get task detail params
func (o *TaskGetTaskDetailParams) WithHTTPClient(client *http.Client) *TaskGetTaskDetailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the task get task detail params
func (o *TaskGetTaskDetailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the task get task detail params
func (o *TaskGetTaskDetailParams) WithAuthorization(authorization *string) *TaskGetTaskDetailParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the task get task detail params
func (o *TaskGetTaskDetailParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithTaskID adds the taskID to the task get task detail params
func (o *TaskGetTaskDetailParams) WithTaskID(taskID int64) *TaskGetTaskDetailParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the task get task detail params
func (o *TaskGetTaskDetailParams) SetTaskID(taskID int64) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *TaskGetTaskDetailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}

	// path param taskID
	if err := r.SetPathParam("taskID", swag.FormatInt64(o.TaskID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TaskAddTaskComment(params *TaskAddTaskCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskAddTaskCommentOK, error)

	TaskGetTaskDetail(params *TaskGetTaskDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskGetTaskDetailOK, error)

	TaskGetTaskList(params *TaskGetTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskGetTaskListOK, error)

	TaskUpdateTask(params *TaskUpdateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskUpdateTaskOK, error)

	TaskUpdateTaskIgnore(params *TaskUpdateTaskIgnoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskUpdateTaskIgnoreOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TaskAddTaskComment adds task comment task

  add task comment
*/
func (a *Client) TaskAddTaskComment(params *TaskAddTaskCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskAddTaskCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskAddTaskCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "task#addTaskComment",
		Method:             "POST",
		PathPattern:        "/v1/task/{taskID}/comment",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaskAddTaskCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaskAddTaskCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for task#addTaskComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TaskGetTaskDetail gets task detail task

  task detail
*/
func (a *Client) TaskGetTaskDetail(params *TaskGetTaskDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskGetTaskDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskGetTaskDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "task#getTaskDetail",
		Method:             "GET",
		PathPattern:        "/v1/task/{taskID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaskGetTaskDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaskGetTaskDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for task#getTaskDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TaskGetTaskList gets task list task

  task list
*/
func (a *Client) TaskGetTaskList(params *TaskGetTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskGetTaskListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskGetTaskListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "task#getTaskList",
		Method:             "GET",
		PathPattern:        "/v1/tasks",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaskGetTaskListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaskGetTaskListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for task#getTaskList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TaskUpdateTask updates task task

  update task
*/
func (a *Client) TaskUpdateTask(params *TaskUpdateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskUpdateTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskUpdateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "task#updateTask",
		Method:             "PUT",
		PathPattern:        "/v1/task/{taskID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaskUpdateTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaskUpdateTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for task#updateTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TaskUpdateTaskIgnore updates task ignore task

  update task ignore
*/
func (a *Client) TaskUpdateTaskIgnore(params *TaskUpdateTaskIgnoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskUpdateTaskIgnoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskUpdateTaskIgnoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "task#updateTaskIgnore",
		Method:             "PUT",
		PathPattern:        "/v1/task/{taskID}/ignore",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaskUpdateTaskIgnoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaskUpdateTaskIgnoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for task#updateTaskIgnore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

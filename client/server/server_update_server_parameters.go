// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/tttfrfr2/goapi2/models"
)

// NewServerUpdateServerParams creates a new ServerUpdateServerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServerUpdateServerParams() *ServerUpdateServerParams {
	return &ServerUpdateServerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServerUpdateServerParamsWithTimeout creates a new ServerUpdateServerParams object
// with the ability to set a timeout on a request.
func NewServerUpdateServerParamsWithTimeout(timeout time.Duration) *ServerUpdateServerParams {
	return &ServerUpdateServerParams{
		timeout: timeout,
	}
}

// NewServerUpdateServerParamsWithContext creates a new ServerUpdateServerParams object
// with the ability to set a context for a request.
func NewServerUpdateServerParamsWithContext(ctx context.Context) *ServerUpdateServerParams {
	return &ServerUpdateServerParams{
		Context: ctx,
	}
}

// NewServerUpdateServerParamsWithHTTPClient creates a new ServerUpdateServerParams object
// with the ability to set a custom HTTPClient for a request.
func NewServerUpdateServerParamsWithHTTPClient(client *http.Client) *ServerUpdateServerParams {
	return &ServerUpdateServerParams{
		HTTPClient: client,
	}
}

/* ServerUpdateServerParams contains all the parameters to send to the API endpoint
   for the server update server operation.

   Typically these are written to a http.Request.
*/
type ServerUpdateServerParams struct {

	/* Authorization.

	   api key auth
	*/
	Authorization *string

	// UpdateServerRequestBody.
	UpdateServerRequestBody *models.ServerUpdateServerRequestBody

	/* ServerID.

	   Server ID

	   Format: int64
	*/
	ServerID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the server update server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerUpdateServerParams) WithDefaults() *ServerUpdateServerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the server update server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerUpdateServerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the server update server params
func (o *ServerUpdateServerParams) WithTimeout(timeout time.Duration) *ServerUpdateServerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the server update server params
func (o *ServerUpdateServerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the server update server params
func (o *ServerUpdateServerParams) WithContext(ctx context.Context) *ServerUpdateServerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the server update server params
func (o *ServerUpdateServerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the server update server params
func (o *ServerUpdateServerParams) WithHTTPClient(client *http.Client) *ServerUpdateServerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the server update server params
func (o *ServerUpdateServerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the server update server params
func (o *ServerUpdateServerParams) WithAuthorization(authorization *string) *ServerUpdateServerParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the server update server params
func (o *ServerUpdateServerParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithUpdateServerRequestBody adds the updateServerRequestBody to the server update server params
func (o *ServerUpdateServerParams) WithUpdateServerRequestBody(updateServerRequestBody *models.ServerUpdateServerRequestBody) *ServerUpdateServerParams {
	o.SetUpdateServerRequestBody(updateServerRequestBody)
	return o
}

// SetUpdateServerRequestBody adds the updateServerRequestBody to the server update server params
func (o *ServerUpdateServerParams) SetUpdateServerRequestBody(updateServerRequestBody *models.ServerUpdateServerRequestBody) {
	o.UpdateServerRequestBody = updateServerRequestBody
}

// WithServerID adds the serverID to the server update server params
func (o *ServerUpdateServerParams) WithServerID(serverID int64) *ServerUpdateServerParams {
	o.SetServerID(serverID)
	return o
}

// SetServerID adds the serverId to the server update server params
func (o *ServerUpdateServerParams) SetServerID(serverID int64) {
	o.ServerID = serverID
}

// WriteToRequest writes these params to a swagger request
func (o *ServerUpdateServerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}
	if o.UpdateServerRequestBody != nil {
		if err := r.SetBodyParam(o.UpdateServerRequestBody); err != nil {
			return err
		}
	}

	// path param serverID
	if err := r.SetPathParam("serverID", swag.FormatInt64(o.ServerID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

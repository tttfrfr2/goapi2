// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServerCreatePkgPasteServer(params *ServerCreatePkgPasteServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerCreatePkgPasteServerOK, error)

	ServerDeleteServer(params *ServerDeleteServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerDeleteServerOK, error)

	ServerGetServerDetail(params *ServerGetServerDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerGetServerDetailOK, error)

	ServerGetServerDetailByUUID(params *ServerGetServerDetailByUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerGetServerDetailByUUIDOK, error)

	ServerGetServerList(params *ServerGetServerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerGetServerListOK, error)

	ServerUpdatePkgPasteServer(params *ServerUpdatePkgPasteServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerUpdatePkgPasteServerOK, error)

	ServerUpdateServer(params *ServerUpdateServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerUpdateServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ServerCreatePkgPasteServer creates pkg paste server server

  create paste server
*/
func (a *Client) ServerCreatePkgPasteServer(params *ServerCreatePkgPasteServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerCreatePkgPasteServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerCreatePkgPasteServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server#createPkgPasteServer",
		Method:             "POST",
		PathPattern:        "/v1/server/paste",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerCreatePkgPasteServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerCreatePkgPasteServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server#createPkgPasteServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerDeleteServer deletes server server

  server delete
*/
func (a *Client) ServerDeleteServer(params *ServerDeleteServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerDeleteServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerDeleteServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server#deleteServer",
		Method:             "DELETE",
		PathPattern:        "/v1/server/{serverID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerDeleteServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerDeleteServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server#deleteServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerGetServerDetail gets server detail server

  server detail
*/
func (a *Client) ServerGetServerDetail(params *ServerGetServerDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerGetServerDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerGetServerDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server#getServerDetail",
		Method:             "GET",
		PathPattern:        "/v1/server/{serverID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerGetServerDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerGetServerDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server#getServerDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerGetServerDetailByUUID gets server detail by UUID server

  server detail by UUID
*/
func (a *Client) ServerGetServerDetailByUUID(params *ServerGetServerDetailByUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerGetServerDetailByUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerGetServerDetailByUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server#getServerDetailByUUID",
		Method:             "GET",
		PathPattern:        "/v1/server/uuid/{serverUuid}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerGetServerDetailByUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerGetServerDetailByUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server#getServerDetailByUUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerGetServerList gets server list server

  server list
*/
func (a *Client) ServerGetServerList(params *ServerGetServerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerGetServerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerGetServerListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server#getServerList",
		Method:             "GET",
		PathPattern:        "/v1/servers",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerGetServerListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerGetServerListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server#getServerList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerUpdatePkgPasteServer updates pkg paste server server

  update paste server
*/
func (a *Client) ServerUpdatePkgPasteServer(params *ServerUpdatePkgPasteServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerUpdatePkgPasteServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerUpdatePkgPasteServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server#updatePkgPasteServer",
		Method:             "PUT",
		PathPattern:        "/v1/server/paste/{serverID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerUpdatePkgPasteServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerUpdatePkgPasteServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server#updatePkgPasteServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerUpdateServer updates server server

  update server
*/
func (a *Client) ServerUpdateServer(params *ServerUpdateServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerUpdateServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerUpdateServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server#updateServer",
		Method:             "PUT",
		PathPattern:        "/v1/server/{serverID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerUpdateServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerUpdateServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server#updateServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

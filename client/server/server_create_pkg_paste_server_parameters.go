// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/tttfrfr2/goapi2/models"
)

// NewServerCreatePkgPasteServerParams creates a new ServerCreatePkgPasteServerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServerCreatePkgPasteServerParams() *ServerCreatePkgPasteServerParams {
	return &ServerCreatePkgPasteServerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServerCreatePkgPasteServerParamsWithTimeout creates a new ServerCreatePkgPasteServerParams object
// with the ability to set a timeout on a request.
func NewServerCreatePkgPasteServerParamsWithTimeout(timeout time.Duration) *ServerCreatePkgPasteServerParams {
	return &ServerCreatePkgPasteServerParams{
		timeout: timeout,
	}
}

// NewServerCreatePkgPasteServerParamsWithContext creates a new ServerCreatePkgPasteServerParams object
// with the ability to set a context for a request.
func NewServerCreatePkgPasteServerParamsWithContext(ctx context.Context) *ServerCreatePkgPasteServerParams {
	return &ServerCreatePkgPasteServerParams{
		Context: ctx,
	}
}

// NewServerCreatePkgPasteServerParamsWithHTTPClient creates a new ServerCreatePkgPasteServerParams object
// with the ability to set a custom HTTPClient for a request.
func NewServerCreatePkgPasteServerParamsWithHTTPClient(client *http.Client) *ServerCreatePkgPasteServerParams {
	return &ServerCreatePkgPasteServerParams{
		HTTPClient: client,
	}
}

/* ServerCreatePkgPasteServerParams contains all the parameters to send to the API endpoint
   for the server create pkg paste server operation.

   Typically these are written to a http.Request.
*/
type ServerCreatePkgPasteServerParams struct {

	/* Authorization.

	   api key auth
	*/
	Authorization *string

	// CreatePkgPasteServerRequestBody.
	CreatePkgPasteServerRequestBody *models.ServerCreatePkgPasteServerRequestBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the server create pkg paste server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerCreatePkgPasteServerParams) WithDefaults() *ServerCreatePkgPasteServerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the server create pkg paste server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerCreatePkgPasteServerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) WithTimeout(timeout time.Duration) *ServerCreatePkgPasteServerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) WithContext(ctx context.Context) *ServerCreatePkgPasteServerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) WithHTTPClient(client *http.Client) *ServerCreatePkgPasteServerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) WithAuthorization(authorization *string) *ServerCreatePkgPasteServerParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithCreatePkgPasteServerRequestBody adds the createPkgPasteServerRequestBody to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) WithCreatePkgPasteServerRequestBody(createPkgPasteServerRequestBody *models.ServerCreatePkgPasteServerRequestBody) *ServerCreatePkgPasteServerParams {
	o.SetCreatePkgPasteServerRequestBody(createPkgPasteServerRequestBody)
	return o
}

// SetCreatePkgPasteServerRequestBody adds the createPkgPasteServerRequestBody to the server create pkg paste server params
func (o *ServerCreatePkgPasteServerParams) SetCreatePkgPasteServerRequestBody(createPkgPasteServerRequestBody *models.ServerCreatePkgPasteServerRequestBody) {
	o.CreatePkgPasteServerRequestBody = createPkgPasteServerRequestBody
}

// WriteToRequest writes these params to a swagger request
func (o *ServerCreatePkgPasteServerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}
	if o.CreatePkgPasteServerRequestBody != nil {
		if err := r.SetBodyParam(o.CreatePkgPasteServerRequestBody); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

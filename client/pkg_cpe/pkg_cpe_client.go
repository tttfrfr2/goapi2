// Code generated by go-swagger; DO NOT EDIT.

package pkg_cpe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pkg cpe API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pkg cpe API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PkgCpeAddCpe(params *PkgCpeAddCpeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeAddCpeOK, error)

	PkgCpeDeleteCpe(params *PkgCpeDeleteCpeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeDeleteCpeOK, error)

	PkgCpeDeleteCpeDeprecated(params *PkgCpeDeleteCpeDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeDeleteCpeDeprecatedOK, error)

	PkgCpeGetCpeDetail(params *PkgCpeGetCpeDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeGetCpeDetailOK, error)

	PkgCpeGetPkgCpeList(params *PkgCpeGetPkgCpeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeGetPkgCpeListOK, error)

	PkgCpeGetPkgDetail(params *PkgCpeGetPkgDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeGetPkgDetailOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PkgCpeAddCpe adds cpe pkg cpe

  add cpe
*/
func (a *Client) PkgCpeAddCpe(params *PkgCpeAddCpeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeAddCpeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPkgCpeAddCpeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pkgCpe#addCpe",
		Method:             "POST",
		PathPattern:        "/v1/pkgCpe/cpe",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PkgCpeAddCpeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PkgCpeAddCpeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pkgCpe#addCpe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PkgCpeDeleteCpe deletes cpe pkg cpe

  delete cpe (urlにcpeIDを指定してください。cpeIDの指定のないアクセス方法は今後削除されます。)
*/
func (a *Client) PkgCpeDeleteCpe(params *PkgCpeDeleteCpeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeDeleteCpeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPkgCpeDeleteCpeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pkgCpe#deleteCpe",
		Method:             "DELETE",
		PathPattern:        "/v1/pkgCpe/cpe/{cpeID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PkgCpeDeleteCpeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PkgCpeDeleteCpeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pkgCpe#deleteCpe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PkgCpeDeleteCpeDeprecated deletes cpe deprecated pkg cpe

  [deprecated] urlにcpeIDを指定して利用してください。cpeIDの指定のないこちらのアクセス方法は今後削除されます。
*/
func (a *Client) PkgCpeDeleteCpeDeprecated(params *PkgCpeDeleteCpeDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeDeleteCpeDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPkgCpeDeleteCpeDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pkgCpe#deleteCpe_deprecated",
		Method:             "DELETE",
		PathPattern:        "/v1/pkgCpe/cpe",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PkgCpeDeleteCpeDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PkgCpeDeleteCpeDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pkgCpe#deleteCpe_deprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PkgCpeGetCpeDetail gets cpe detail pkg cpe

  cpe detail
*/
func (a *Client) PkgCpeGetCpeDetail(params *PkgCpeGetCpeDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeGetCpeDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPkgCpeGetCpeDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pkgCpe#getCpeDetail",
		Method:             "GET",
		PathPattern:        "/v1/pkgCpe/cpe/{cpeID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PkgCpeGetCpeDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PkgCpeGetCpeDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pkgCpe#getCpeDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PkgCpeGetPkgCpeList gets pkg cpe list pkg cpe

  pkgCpe list
*/
func (a *Client) PkgCpeGetPkgCpeList(params *PkgCpeGetPkgCpeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeGetPkgCpeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPkgCpeGetPkgCpeListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pkgCpe#getPkgCpeList",
		Method:             "GET",
		PathPattern:        "/v1/pkgCpes",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PkgCpeGetPkgCpeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PkgCpeGetPkgCpeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pkgCpe#getPkgCpeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PkgCpeGetPkgDetail gets pkg detail pkg cpe

  pkg detail
*/
func (a *Client) PkgCpeGetPkgDetail(params *PkgCpeGetPkgDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PkgCpeGetPkgDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPkgCpeGetPkgDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pkgCpe#getPkgDetail",
		Method:             "GET",
		PathPattern:        "/v1/pkgCpe/pkg/{pkgID}",
		ProducesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/gob", "application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PkgCpeGetPkgDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PkgCpeGetPkgDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pkgCpe#getPkgDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

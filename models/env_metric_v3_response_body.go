// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvMetricV3ResponseBody EnvMetricV3ResponseBody
//
// EnvMetricV3 describes a envMetricV3
// Example: {"createdAt":"2018-07-14T08:13:28Z","cveID":"CVE-2018-1234","ma":"","mac":"","mav":"","mc":"","mpr":"","ms":"","mui":"","roleID":1,"roleName":"roleName","updatedAt":"2018-07-14T08:13:28Z"}
//
// swagger:model EnvMetricV3ResponseBody
type EnvMetricV3ResponseBody struct {

	// created time
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// CveID of envMetricV3
	// Example: CVE-2018-1234
	// Required: true
	CveID *string `json:"cveID"`

	// MA of envMetricV3
	// Required: true
	Ma *string `json:"ma"`

	// MAC of envMetricV3
	// Required: true
	Mac *string `json:"mac"`

	// MAV of envMetricV3
	// Required: true
	Mav *string `json:"mav"`

	// MC of envMetricV3
	// Required: true
	Mc *string `json:"mc"`

	// MPR of envMetricV3
	// Required: true
	Mpr *string `json:"mpr"`

	// MS of envMetricV3
	// Required: true
	Ms *string `json:"ms"`

	// MUI of envMetricV3
	// Required: true
	Mui *string `json:"mui"`

	// ServerRoleID of envMetricV3
	// Example: 1
	// Required: true
	RoleID *int64 `json:"roleID"`

	// ServerRoleName of envMetricV3
	// Example: roleName
	// Required: true
	RoleName *string `json:"roleName"`

	// updated time
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *EnvMetricV3ResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// created time
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		CreatedAt *strfmt.DateTime `json:"createdAt"`

		// CveID of envMetricV3
		// Example: CVE-2018-1234
		// Required: true
		CveID *string `json:"cveID"`

		// MA of envMetricV3
		// Required: true
		Ma *string `json:"ma"`

		// MAC of envMetricV3
		// Required: true
		Mac *string `json:"mac"`

		// MAV of envMetricV3
		// Required: true
		Mav *string `json:"mav"`

		// MC of envMetricV3
		// Required: true
		Mc *string `json:"mc"`

		// MPR of envMetricV3
		// Required: true
		Mpr *string `json:"mpr"`

		// MS of envMetricV3
		// Required: true
		Ms *string `json:"ms"`

		// MUI of envMetricV3
		// Required: true
		Mui *string `json:"mui"`

		// ServerRoleID of envMetricV3
		// Example: 1
		// Required: true
		RoleID *int64 `json:"roleID"`

		// ServerRoleName of envMetricV3
		// Example: roleName
		// Required: true
		RoleName *string `json:"roleName"`

		// updated time
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		UpdatedAt *strfmt.DateTime `json:"updatedAt"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.CreatedAt = props.CreatedAt
	m.CveID = props.CveID
	m.Ma = props.Ma
	m.Mac = props.Mac
	m.Mav = props.Mav
	m.Mc = props.Mc
	m.Mpr = props.Mpr
	m.Ms = props.Ms
	m.Mui = props.Mui
	m.RoleID = props.RoleID
	m.RoleName = props.RoleName
	m.UpdatedAt = props.UpdatedAt
	return nil
}

// Validate validates this env metric v3 response body
func (m *EnvMetricV3ResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMav(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMpr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMui(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvMetricV3ResponseBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cveID", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateMa(formats strfmt.Registry) error {

	if err := validate.Required("ma", "body", m.Ma); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateMav(formats strfmt.Registry) error {

	if err := validate.Required("mav", "body", m.Mav); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateMc(formats strfmt.Registry) error {

	if err := validate.Required("mc", "body", m.Mc); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateMpr(formats strfmt.Registry) error {

	if err := validate.Required("mpr", "body", m.Mpr); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateMs(formats strfmt.Registry) error {

	if err := validate.Required("ms", "body", m.Ms); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateMui(formats strfmt.Registry) error {

	if err := validate.Required("mui", "body", m.Mui); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("roleID", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateRoleName(formats strfmt.Registry) error {

	if err := validate.Required("roleName", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

func (m *EnvMetricV3ResponseBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this env metric v3 response body based on context it is used
func (m *EnvMetricV3ResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnvMetricV3ResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvMetricV3ResponseBody) UnmarshalBinary(b []byte) error {
	var res EnvMetricV3ResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PagingResponseBody PagingResponseBody
//
// Paging describes a paging object
// Example: {"limit":20,"offset":10,"page":1,"totalCount":200,"totalPage":10}
//
// swagger:model PagingResponseBody
type PagingResponseBody struct {

	// Limit
	// Example: 20
	// Required: true
	Limit *int64 `json:"limit"`

	// Offset
	// Example: 10
	// Required: true
	Offset *int64 `json:"offset"`

	// Page
	// Example: 1
	// Required: true
	Page *int64 `json:"page"`

	// TotalCount
	// Example: 200
	// Required: true
	TotalCount *int64 `json:"totalCount"`

	// Total Page Size
	// Example: 10
	// Required: true
	TotalPage *int64 `json:"totalPage"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *PagingResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// Limit
		// Example: 20
		// Required: true
		Limit *int64 `json:"limit"`

		// Offset
		// Example: 10
		// Required: true
		Offset *int64 `json:"offset"`

		// Page
		// Example: 1
		// Required: true
		Page *int64 `json:"page"`

		// TotalCount
		// Example: 200
		// Required: true
		TotalCount *int64 `json:"totalCount"`

		// Total Page Size
		// Example: 10
		// Required: true
		TotalPage *int64 `json:"totalPage"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Limit = props.Limit
	m.Offset = props.Offset
	m.Page = props.Page
	m.TotalCount = props.TotalCount
	m.TotalPage = props.TotalPage
	return nil
}

// Validate validates this paging response body
func (m *PagingResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PagingResponseBody) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *PagingResponseBody) validateOffset(formats strfmt.Registry) error {

	if err := validate.Required("offset", "body", m.Offset); err != nil {
		return err
	}

	return nil
}

func (m *PagingResponseBody) validatePage(formats strfmt.Registry) error {

	if err := validate.Required("page", "body", m.Page); err != nil {
		return err
	}

	return nil
}

func (m *PagingResponseBody) validateTotalCount(formats strfmt.Registry) error {

	if err := validate.Required("totalCount", "body", m.TotalCount); err != nil {
		return err
	}

	return nil
}

func (m *PagingResponseBody) validateTotalPage(formats strfmt.Registry) error {

	if err := validate.Required("totalPage", "body", m.TotalPage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this paging response body based on context it is used
func (m *PagingResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PagingResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PagingResponseBody) UnmarshalBinary(b []byte) error {
	var res PagingResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskListResponseBody TaskListResponseBody
// Example: {"advisoryIDs":["advisoryID"],"applyingPatchOn":"2018-07-13","createdAt":"2018-07-14T08:13:28Z","cveID":"CVE-2017-6799","detectionTools":[{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"}],"hasExploit":true,"hasMitigation":true,"hasWorkaround":true,"id":1,"ignore":true,"ignoreUntil":"vector","mainUserID":1,"mainUserName":"main-user-name","osFamily":"centos","osVersion":"6","pkgCpeNames":["package1","package2"],"pkgNotFixedYet":true,"priority":"high","roleID":1,"roleName":"server-role-name","serverID":1,"serverName":"serverName","serverTags":["tag"],"serverUuid":"abcdef12-ecd0-39f4-a8f4-1ef216a4b5f2","status":"new","subUserID":1,"subUserName":"sub-user-name","updatedAt":"2018-07-14T08:13:28Z"}
//
// swagger:model TaskListResponseBody
type TaskListResponseBody struct {

	// advisoryIDs of cve
	// Example: ["advisoryID"]
	AdvisoryIDs []string `json:"advisoryIDs"`

	// ApplyingPatchOn of task
	// Example: 2018-07-13
	// Format: date
	ApplyingPatchOn strfmt.Date `json:"applyingPatchOn,omitempty"`

	// created time of task
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// CVE ID of task
	// Example: CVE-2017-6799
	// Required: true
	CveID *string `json:"cveID"`

	// DetectionTools of task
	// Example: [{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"}]
	DetectionTools []*DetectionToolResponseBody `json:"detectionTools"`

	// hasExploit of cve
	// Example: true
	HasExploit bool `json:"hasExploit,omitempty"`

	// hasMitigation of cve
	// Example: true
	HasMitigation bool `json:"hasMitigation,omitempty"`

	// hasWorkaroundof cve
	// Example: true
	HasWorkaround bool `json:"hasWorkaround,omitempty"`

	// ID of task
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Ignore of task
	// Example: true
	// Required: true
	Ignore *bool `json:"ignore"`

	// Ignore until of task
	// Example: vector
	IgnoreUntil string `json:"ignoreUntil,omitempty"`

	// MainUserID of task
	// Example: 1
	MainUserID int64 `json:"mainUserID,omitempty"`

	// MainUserName of task
	// Example: main-user-name
	MainUserName string `json:"mainUserName,omitempty"`

	// OS Name of server
	// Example: centos
	// Required: true
	OsFamily *string `json:"osFamily"`

	// OS Version of server
	// Example: 6
	// Required: true
	OsVersion *string `json:"osVersion"`

	// Package And CPE Names of task
	// Example: ["package1","package2"]
	PkgCpeNames []string `json:"pkgCpeNames"`

	// Flag of Not Fixed Yet of task
	// Example: true
	PkgNotFixedYet bool `json:"pkgNotFixedYet,omitempty"`

	// Priority of task
	// Example: high
	// Required: true
	Priority *string `json:"priority"`

	// ServerRoleID of task
	// Example: 1
	// Required: true
	RoleID *int64 `json:"roleID"`

	// ServerRoleName of task
	// Example: server-role-name
	// Required: true
	RoleName *string `json:"roleName"`

	// ServerID of task
	// Example: 1
	// Required: true
	ServerID *int64 `json:"serverID"`

	// ServerName of task
	// Example: serverName
	// Required: true
	ServerName *string `json:"serverName"`

	// ServerTags of task
	// Example: ["tag"]
	ServerTags []string `json:"serverTags"`

	// ServerUUID of task
	// Example: abcdef12-ecd0-39f4-a8f4-1ef216a4b5f2
	// Required: true
	ServerUUID *string `json:"serverUuid"`

	// Status of task
	// Example: new
	// Required: true
	Status *string `json:"status"`

	// SubUserID of task
	// Example: 1
	SubUserID int64 `json:"subUserID,omitempty"`

	// SubUserName of task
	// Example: sub-user-name
	SubUserName string `json:"subUserName,omitempty"`

	// updated time of task
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *TaskListResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// advisoryIDs of cve
		// Example: ["advisoryID"]
		AdvisoryIDs []string `json:"advisoryIDs"`

		// ApplyingPatchOn of task
		// Example: 2018-07-13
		// Format: date
		ApplyingPatchOn strfmt.Date `json:"applyingPatchOn,omitempty"`

		// created time of task
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		CreatedAt *strfmt.DateTime `json:"createdAt"`

		// CVE ID of task
		// Example: CVE-2017-6799
		// Required: true
		CveID *string `json:"cveID"`

		// DetectionTools of task
		// Example: [{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"}]
		DetectionTools []*DetectionToolResponseBody `json:"detectionTools"`

		// hasExploit of cve
		// Example: true
		HasExploit bool `json:"hasExploit,omitempty"`

		// hasMitigation of cve
		// Example: true
		HasMitigation bool `json:"hasMitigation,omitempty"`

		// hasWorkaroundof cve
		// Example: true
		HasWorkaround bool `json:"hasWorkaround,omitempty"`

		// ID of task
		// Example: 1
		// Required: true
		ID *int64 `json:"id"`

		// Ignore of task
		// Example: true
		// Required: true
		Ignore *bool `json:"ignore"`

		// Ignore until of task
		// Example: vector
		IgnoreUntil string `json:"ignoreUntil,omitempty"`

		// MainUserID of task
		// Example: 1
		MainUserID int64 `json:"mainUserID,omitempty"`

		// MainUserName of task
		// Example: main-user-name
		MainUserName string `json:"mainUserName,omitempty"`

		// OS Name of server
		// Example: centos
		// Required: true
		OsFamily *string `json:"osFamily"`

		// OS Version of server
		// Example: 6
		// Required: true
		OsVersion *string `json:"osVersion"`

		// Package And CPE Names of task
		// Example: ["package1","package2"]
		PkgCpeNames []string `json:"pkgCpeNames"`

		// Flag of Not Fixed Yet of task
		// Example: true
		PkgNotFixedYet bool `json:"pkgNotFixedYet,omitempty"`

		// Priority of task
		// Example: high
		// Required: true
		Priority *string `json:"priority"`

		// ServerRoleID of task
		// Example: 1
		// Required: true
		RoleID *int64 `json:"roleID"`

		// ServerRoleName of task
		// Example: server-role-name
		// Required: true
		RoleName *string `json:"roleName"`

		// ServerID of task
		// Example: 1
		// Required: true
		ServerID *int64 `json:"serverID"`

		// ServerName of task
		// Example: serverName
		// Required: true
		ServerName *string `json:"serverName"`

		// ServerTags of task
		// Example: ["tag"]
		ServerTags []string `json:"serverTags"`

		// ServerUUID of task
		// Example: abcdef12-ecd0-39f4-a8f4-1ef216a4b5f2
		// Required: true
		ServerUUID *string `json:"serverUuid"`

		// Status of task
		// Example: new
		// Required: true
		Status *string `json:"status"`

		// SubUserID of task
		// Example: 1
		SubUserID int64 `json:"subUserID,omitempty"`

		// SubUserName of task
		// Example: sub-user-name
		SubUserName string `json:"subUserName,omitempty"`

		// updated time of task
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		UpdatedAt *strfmt.DateTime `json:"updatedAt"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AdvisoryIDs = props.AdvisoryIDs
	m.ApplyingPatchOn = props.ApplyingPatchOn
	m.CreatedAt = props.CreatedAt
	m.CveID = props.CveID
	m.DetectionTools = props.DetectionTools
	m.HasExploit = props.HasExploit
	m.HasMitigation = props.HasMitigation
	m.HasWorkaround = props.HasWorkaround
	m.ID = props.ID
	m.Ignore = props.Ignore
	m.IgnoreUntil = props.IgnoreUntil
	m.MainUserID = props.MainUserID
	m.MainUserName = props.MainUserName
	m.OsFamily = props.OsFamily
	m.OsVersion = props.OsVersion
	m.PkgCpeNames = props.PkgCpeNames
	m.PkgNotFixedYet = props.PkgNotFixedYet
	m.Priority = props.Priority
	m.RoleID = props.RoleID
	m.RoleName = props.RoleName
	m.ServerID = props.ServerID
	m.ServerName = props.ServerName
	m.ServerTags = props.ServerTags
	m.ServerUUID = props.ServerUUID
	m.Status = props.Status
	m.SubUserID = props.SubUserID
	m.SubUserName = props.SubUserName
	m.UpdatedAt = props.UpdatedAt
	return nil
}

// Validate validates this task list response body
func (m *TaskListResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplyingPatchOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionTools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgnore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListResponseBody) validateApplyingPatchOn(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplyingPatchOn) { // not required
		return nil
	}

	if err := validate.FormatOf("applyingPatchOn", "body", "date", m.ApplyingPatchOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cveID", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateDetectionTools(formats strfmt.Registry) error {
	if swag.IsZero(m.DetectionTools) { // not required
		return nil
	}

	for i := 0; i < len(m.DetectionTools); i++ {
		if swag.IsZero(m.DetectionTools[i]) { // not required
			continue
		}

		if m.DetectionTools[i] != nil {
			if err := m.DetectionTools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("detectionTools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("detectionTools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskListResponseBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateIgnore(formats strfmt.Registry) error {

	if err := validate.Required("ignore", "body", m.Ignore); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateOsFamily(formats strfmt.Registry) error {

	if err := validate.Required("osFamily", "body", m.OsFamily); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("osVersion", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("roleID", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateRoleName(formats strfmt.Registry) error {

	if err := validate.Required("roleName", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("serverID", "body", m.ServerID); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateServerName(formats strfmt.Registry) error {

	if err := validate.Required("serverName", "body", m.ServerName); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateServerUUID(formats strfmt.Registry) error {

	if err := validate.Required("serverUuid", "body", m.ServerUUID); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TaskListResponseBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this task list response body based on the context it is used
func (m *TaskListResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetectionTools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListResponseBody) contextValidateDetectionTools(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DetectionTools); i++ {

		if m.DetectionTools[i] != nil {
			if err := m.DetectionTools[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("detectionTools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("detectionTools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskListResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListResponseBody) UnmarshalBinary(b []byte) error {
	var res TaskListResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerChildResponseBody ServerChildResponseBody
// Example: {"createdAt":"2018-07-14T08:13:28Z","defaultUserId":1,"defaultUserName":"vuls user","hostUuid":"141df30a-ecd0-39f4-a8f4-1ef216a4b5f2","id":1,"lastScannedAt":"2018-07-14T08:13:28Z","lastUploadedAt":"2018-07-14T08:13:28Z","needKernelRestart":true,"osFamily":"centos","osVersion":"6","serverName":"server01","serverUuid":"abcdef12-ecd0-39f4-a8f4-1ef216a4b5f2","serverroleId":1,"serverroleName":"server_role01","tags":["Accusamus nobis alias dicta.","Perspiciatis sunt."],"updatedAt":"2018-07-14T08:13:28Z"}
//
// swagger:model ServerChildResponseBody
type ServerChildResponseBody struct {

	// crated time of server
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// default user ID of server
	// Example: 1
	DefaultUserID int64 `json:"defaultUserId,omitempty"`

	// default user name of server
	// Example: vuls user
	DefaultUserName string `json:"defaultUserName,omitempty"`

	// UUID of server
	// Example: 141df30a-ecd0-39f4-a8f4-1ef216a4b5f2
	// Required: true
	// Format: uuid
	HostUUID *strfmt.UUID `json:"hostUuid"`

	// ID of server
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// last scanned time of server
	// Example: 2018-07-14T08:13:28Z
	LastScannedAt string `json:"lastScannedAt,omitempty"`

	// last uploaded time of server
	// Example: 2018-07-14T08:13:28Z
	LastUploadedAt string `json:"lastUploadedAt,omitempty"`

	// Whether server needs kernel restart
	// Example: true
	// Required: true
	NeedKernelRestart *bool `json:"needKernelRestart"`

	// OS Name of server
	// Example: centos
	// Required: true
	OsFamily *string `json:"osFamily"`

	// OS Version of server
	// Example: 6
	// Required: true
	OsVersion *string `json:"osVersion"`

	// Name of server
	// Example: server01
	// Required: true
	ServerName *string `json:"serverName"`

	// UUID of server
	// Example: abcdef12-ecd0-39f4-a8f4-1ef216a4b5f2
	// Required: true
	// Format: uuid
	ServerUUID *strfmt.UUID `json:"serverUuid"`

	// ID of server role
	// Example: 1
	// Required: true
	ServerroleID *int64 `json:"serverroleId"`

	// Name of server role
	// Example: server_role01
	// Required: true
	ServerroleName *string `json:"serverroleName"`

	// tags is list of server tag
	// Example: ["Consequatur atque et animi doloribus.","Aperiam id molestias dolore.","Consectetur asperiores."]
	Tags []string `json:"tags"`

	// updated time of server
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	UpdatedAt *string `json:"updatedAt"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ServerChildResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// crated time of server
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		CreatedAt *string `json:"createdAt"`

		// default user ID of server
		// Example: 1
		DefaultUserID int64 `json:"defaultUserId,omitempty"`

		// default user name of server
		// Example: vuls user
		DefaultUserName string `json:"defaultUserName,omitempty"`

		// UUID of server
		// Example: 141df30a-ecd0-39f4-a8f4-1ef216a4b5f2
		// Required: true
		// Format: uuid
		HostUUID *strfmt.UUID `json:"hostUuid"`

		// ID of server
		// Example: 1
		// Required: true
		ID *int64 `json:"id"`

		// last scanned time of server
		// Example: 2018-07-14T08:13:28Z
		LastScannedAt string `json:"lastScannedAt,omitempty"`

		// last uploaded time of server
		// Example: 2018-07-14T08:13:28Z
		LastUploadedAt string `json:"lastUploadedAt,omitempty"`

		// Whether server needs kernel restart
		// Example: true
		// Required: true
		NeedKernelRestart *bool `json:"needKernelRestart"`

		// OS Name of server
		// Example: centos
		// Required: true
		OsFamily *string `json:"osFamily"`

		// OS Version of server
		// Example: 6
		// Required: true
		OsVersion *string `json:"osVersion"`

		// Name of server
		// Example: server01
		// Required: true
		ServerName *string `json:"serverName"`

		// UUID of server
		// Example: abcdef12-ecd0-39f4-a8f4-1ef216a4b5f2
		// Required: true
		// Format: uuid
		ServerUUID *strfmt.UUID `json:"serverUuid"`

		// ID of server role
		// Example: 1
		// Required: true
		ServerroleID *int64 `json:"serverroleId"`

		// Name of server role
		// Example: server_role01
		// Required: true
		ServerroleName *string `json:"serverroleName"`

		// tags is list of server tag
		// Example: ["Consequatur atque et animi doloribus.","Aperiam id molestias dolore.","Consectetur asperiores."]
		Tags []string `json:"tags"`

		// updated time of server
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		UpdatedAt *string `json:"updatedAt"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.CreatedAt = props.CreatedAt
	m.DefaultUserID = props.DefaultUserID
	m.DefaultUserName = props.DefaultUserName
	m.HostUUID = props.HostUUID
	m.ID = props.ID
	m.LastScannedAt = props.LastScannedAt
	m.LastUploadedAt = props.LastUploadedAt
	m.NeedKernelRestart = props.NeedKernelRestart
	m.OsFamily = props.OsFamily
	m.OsVersion = props.OsVersion
	m.ServerName = props.ServerName
	m.ServerUUID = props.ServerUUID
	m.ServerroleID = props.ServerroleID
	m.ServerroleName = props.ServerroleName
	m.Tags = props.Tags
	m.UpdatedAt = props.UpdatedAt
	return nil
}

// Validate validates this server child response body
func (m *ServerChildResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeedKernelRestart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerroleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerroleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerChildResponseBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateHostUUID(formats strfmt.Registry) error {

	if err := validate.Required("hostUuid", "body", m.HostUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("hostUuid", "body", "uuid", m.HostUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateNeedKernelRestart(formats strfmt.Registry) error {

	if err := validate.Required("needKernelRestart", "body", m.NeedKernelRestart); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateOsFamily(formats strfmt.Registry) error {

	if err := validate.Required("osFamily", "body", m.OsFamily); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("osVersion", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateServerName(formats strfmt.Registry) error {

	if err := validate.Required("serverName", "body", m.ServerName); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateServerUUID(formats strfmt.Registry) error {

	if err := validate.Required("serverUuid", "body", m.ServerUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("serverUuid", "body", "uuid", m.ServerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateServerroleID(formats strfmt.Registry) error {

	if err := validate.Required("serverroleId", "body", m.ServerroleID); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateServerroleName(formats strfmt.Registry) error {

	if err := validate.Required("serverroleName", "body", m.ServerroleName); err != nil {
		return err
	}

	return nil
}

func (m *ServerChildResponseBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server child response body based on context it is used
func (m *ServerChildResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerChildResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerChildResponseBody) UnmarshalBinary(b []byte) error {
	var res ServerChildResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskUpdateTaskIgnoreRequestBody TaskUpdateTaskIgnoreRequestBody
// Example: {"ignoreUntil":"forever"}
//
// swagger:model TaskUpdateTaskIgnoreRequestBody
type TaskUpdateTaskIgnoreRequestBody struct {

	// ignore until.
	// Example: forever
	// Required: true
	// Enum: [nothing anything forever vector pkg_fix exploit]
	IgnoreUntil *string `json:"ignoreUntil"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *TaskUpdateTaskIgnoreRequestBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// ignore until.
		// Example: forever
		// Required: true
		// Enum: [nothing anything forever vector pkg_fix exploit]
		IgnoreUntil *string `json:"ignoreUntil"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.IgnoreUntil = props.IgnoreUntil
	return nil
}

// Validate validates this task update task ignore request body
func (m *TaskUpdateTaskIgnoreRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIgnoreUntil(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskUpdateTaskIgnoreRequestBodyTypeIgnoreUntilPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nothing","anything","forever","vector","pkg_fix","exploit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskUpdateTaskIgnoreRequestBodyTypeIgnoreUntilPropEnum = append(taskUpdateTaskIgnoreRequestBodyTypeIgnoreUntilPropEnum, v)
	}
}

const (

	// TaskUpdateTaskIgnoreRequestBodyIgnoreUntilNothing captures enum value "nothing"
	TaskUpdateTaskIgnoreRequestBodyIgnoreUntilNothing string = "nothing"

	// TaskUpdateTaskIgnoreRequestBodyIgnoreUntilAnything captures enum value "anything"
	TaskUpdateTaskIgnoreRequestBodyIgnoreUntilAnything string = "anything"

	// TaskUpdateTaskIgnoreRequestBodyIgnoreUntilForever captures enum value "forever"
	TaskUpdateTaskIgnoreRequestBodyIgnoreUntilForever string = "forever"

	// TaskUpdateTaskIgnoreRequestBodyIgnoreUntilVector captures enum value "vector"
	TaskUpdateTaskIgnoreRequestBodyIgnoreUntilVector string = "vector"

	// TaskUpdateTaskIgnoreRequestBodyIgnoreUntilPkgFix captures enum value "pkg_fix"
	TaskUpdateTaskIgnoreRequestBodyIgnoreUntilPkgFix string = "pkg_fix"

	// TaskUpdateTaskIgnoreRequestBodyIgnoreUntilExploit captures enum value "exploit"
	TaskUpdateTaskIgnoreRequestBodyIgnoreUntilExploit string = "exploit"
)

// prop value enum
func (m *TaskUpdateTaskIgnoreRequestBody) validateIgnoreUntilEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskUpdateTaskIgnoreRequestBodyTypeIgnoreUntilPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskUpdateTaskIgnoreRequestBody) validateIgnoreUntil(formats strfmt.Registry) error {

	if err := validate.Required("ignoreUntil", "body", m.IgnoreUntil); err != nil {
		return err
	}

	// value enum
	if err := m.validateIgnoreUntilEnum("ignoreUntil", "body", *m.IgnoreUntil); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this task update task ignore request body based on context it is used
func (m *TaskUpdateTaskIgnoreRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskUpdateTaskIgnoreRequestBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskUpdateTaskIgnoreRequestBody) UnmarshalBinary(b []byte) error {
	var res TaskUpdateTaskIgnoreRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

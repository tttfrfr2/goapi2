// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChildTaskResponseBody ChildTaskResponseBody
// Example: {"applyingPatchOn":"2018-07-13","createdAt":"2018-07-14T08:13:28Z","cveID":"CVE-2017-6799","id":1,"ignore":true,"ignoreUntil":"vector","mainUserID":1,"mainUserName":"main-user-name","priority":"high","serverID":1,"status":"new","subUserID":1,"subUserName":"sub-user-name","updatedAt":"2018-07-14T08:13:28Z"}
//
// swagger:model ChildTaskResponseBody
type ChildTaskResponseBody struct {

	// ApplyingPatchOn of task
	// Example: 2018-07-13
	// Format: date
	ApplyingPatchOn strfmt.Date `json:"applyingPatchOn,omitempty"`

	// created time of task
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// CVE ID of task
	// Example: CVE-2017-6799
	// Required: true
	CveID *string `json:"cveID"`

	// ID of task
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Ignore of task
	// Example: true
	// Required: true
	Ignore *bool `json:"ignore"`

	// Ignore until of task
	// Example: vector
	IgnoreUntil string `json:"ignoreUntil,omitempty"`

	// MainUserID of task
	// Example: 1
	MainUserID int64 `json:"mainUserID,omitempty"`

	// MainUserName of task
	// Example: main-user-name
	MainUserName string `json:"mainUserName,omitempty"`

	// Priority of task
	// Example: high
	// Required: true
	Priority *string `json:"priority"`

	// ServerID of task
	// Example: 1
	// Required: true
	ServerID *int64 `json:"serverID"`

	// Status of task
	// Example: new
	// Required: true
	Status *string `json:"status"`

	// SubUserID of task
	// Example: 1
	SubUserID int64 `json:"subUserID,omitempty"`

	// SubUserName of task
	// Example: sub-user-name
	SubUserName string `json:"subUserName,omitempty"`

	// updated time of task
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ChildTaskResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// ApplyingPatchOn of task
		// Example: 2018-07-13
		// Format: date
		ApplyingPatchOn strfmt.Date `json:"applyingPatchOn,omitempty"`

		// created time of task
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		CreatedAt *strfmt.DateTime `json:"createdAt"`

		// CVE ID of task
		// Example: CVE-2017-6799
		// Required: true
		CveID *string `json:"cveID"`

		// ID of task
		// Example: 1
		// Required: true
		ID *int64 `json:"id"`

		// Ignore of task
		// Example: true
		// Required: true
		Ignore *bool `json:"ignore"`

		// Ignore until of task
		// Example: vector
		IgnoreUntil string `json:"ignoreUntil,omitempty"`

		// MainUserID of task
		// Example: 1
		MainUserID int64 `json:"mainUserID,omitempty"`

		// MainUserName of task
		// Example: main-user-name
		MainUserName string `json:"mainUserName,omitempty"`

		// Priority of task
		// Example: high
		// Required: true
		Priority *string `json:"priority"`

		// ServerID of task
		// Example: 1
		// Required: true
		ServerID *int64 `json:"serverID"`

		// Status of task
		// Example: new
		// Required: true
		Status *string `json:"status"`

		// SubUserID of task
		// Example: 1
		SubUserID int64 `json:"subUserID,omitempty"`

		// SubUserName of task
		// Example: sub-user-name
		SubUserName string `json:"subUserName,omitempty"`

		// updated time of task
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		UpdatedAt *strfmt.DateTime `json:"updatedAt"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.ApplyingPatchOn = props.ApplyingPatchOn
	m.CreatedAt = props.CreatedAt
	m.CveID = props.CveID
	m.ID = props.ID
	m.Ignore = props.Ignore
	m.IgnoreUntil = props.IgnoreUntil
	m.MainUserID = props.MainUserID
	m.MainUserName = props.MainUserName
	m.Priority = props.Priority
	m.ServerID = props.ServerID
	m.Status = props.Status
	m.SubUserID = props.SubUserID
	m.SubUserName = props.SubUserName
	m.UpdatedAt = props.UpdatedAt
	return nil
}

// Validate validates this child task response body
func (m *ChildTaskResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplyingPatchOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgnore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChildTaskResponseBody) validateApplyingPatchOn(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplyingPatchOn) { // not required
		return nil
	}

	if err := validate.FormatOf("applyingPatchOn", "body", "date", m.ApplyingPatchOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ChildTaskResponseBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ChildTaskResponseBody) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cveID", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *ChildTaskResponseBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ChildTaskResponseBody) validateIgnore(formats strfmt.Registry) error {

	if err := validate.Required("ignore", "body", m.Ignore); err != nil {
		return err
	}

	return nil
}

func (m *ChildTaskResponseBody) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *ChildTaskResponseBody) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("serverID", "body", m.ServerID); err != nil {
		return err
	}

	return nil
}

func (m *ChildTaskResponseBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ChildTaskResponseBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this child task response body based on context it is used
func (m *ChildTaskResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChildTaskResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChildTaskResponseBody) UnmarshalBinary(b []byte) error {
	var res ChildTaskResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

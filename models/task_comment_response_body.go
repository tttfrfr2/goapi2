// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskCommentResponseBody TaskComment ResponseBody
// Example: {"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"}
//
// swagger:model TaskComment ResponseBody
type TaskCommentResponseBody struct {

	// Comment content of TaskComment
	// Example: comment
	// Required: true
	Comment *string `json:"comment"`

	// created time of TaskComment
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// ID of TaskComment
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Type of TaskComment
	// Example: system
	// Required: true
	Type *string `json:"type"`

	// updated time of TaskComment
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`

	// UserID of TaskComment
	// Example: 1
	// Required: true
	UserID *int64 `json:"userID"`

	// UserName of TaskComment
	// Example: user-name
	// Required: true
	UserName *string `json:"userName"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *TaskCommentResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// Comment content of TaskComment
		// Example: comment
		// Required: true
		Comment *string `json:"comment"`

		// created time of TaskComment
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		CreatedAt *strfmt.DateTime `json:"createdAt"`

		// ID of TaskComment
		// Example: 1
		// Required: true
		ID *int64 `json:"id"`

		// Type of TaskComment
		// Example: system
		// Required: true
		Type *string `json:"type"`

		// updated time of TaskComment
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		UpdatedAt *strfmt.DateTime `json:"updatedAt"`

		// UserID of TaskComment
		// Example: 1
		// Required: true
		UserID *int64 `json:"userID"`

		// UserName of TaskComment
		// Example: user-name
		// Required: true
		UserName *string `json:"userName"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Comment = props.Comment
	m.CreatedAt = props.CreatedAt
	m.ID = props.ID
	m.Type = props.Type
	m.UpdatedAt = props.UpdatedAt
	m.UserID = props.UserID
	m.UserName = props.UserName
	return nil
}

// Validate validates this task comment response body
func (m *TaskCommentResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskCommentResponseBody) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *TaskCommentResponseBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskCommentResponseBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TaskCommentResponseBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TaskCommentResponseBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskCommentResponseBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userID", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *TaskCommentResponseBody) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this task comment response body based on context it is used
func (m *TaskCommentResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskCommentResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskCommentResponseBody) UnmarshalBinary(b []byte) error {
	var res TaskCommentResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

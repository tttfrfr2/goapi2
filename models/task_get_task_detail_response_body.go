// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskGetTaskDetailResponseBody TaskGetTaskDetailResponseBody
// Example: {"advisoryIDs":["advisoryID"],"applyingPatchOn":"2018-07-13","comments":[{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"},{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"}],"createdAt":"2018-07-14T08:13:28Z","cveID":"CVE-2017-6799","cvss":{"Ea quo.":"Dicta iure ratione ut optio."},"detectionMethods":[{"name":"vuls","reliabilityScore":100},{"name":"vuls","reliabilityScore":100}],"detectionTools":[{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"}],"id":1,"ignore":true,"ignoreUntil":"vector","mainUserID":1,"mainUserName":"main-user-name","packageStatuses":{"bash":"resolved"},"pkgCpes":[{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"},{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"}],"priority":"high","roleID":1,"roleName":"server-role-name","server":{"createdAt":"2018-07-14T08:13:28Z","defaultUserId":1,"defaultUserName":"vuls user","hostUuid":"141df30a-ecd0-39f4-a8f4-1ef216a4b5f2","id":1,"lastScannedAt":"2018-07-14T08:13:28Z","lastUploadedAt":"2018-07-14T08:13:28Z","needKernelRestart":true,"osFamily":"centos","osVersion":"6","serverName":"server01","serverUuid":"abcdef12-ecd0-39f4-a8f4-1ef216a4b5f2","serverroleId":1,"serverroleName":"server_role01","tags":["Fugit repellendus illo.","Aperiam ipsa voluptate autem unde.","Fuga accusamus aut."],"updatedAt":"2018-07-14T08:13:28Z"},"serverID":1,"status":"new","subUserID":1,"subUserName":"sub-user-name","updatedAt":"2018-07-14T08:13:28Z"}
//
// swagger:model TaskGetTaskDetailResponseBody
type TaskGetTaskDetailResponseBody struct {

	// advisoryIDs of cve
	// Example: ["advisoryID"]
	AdvisoryIDs []string `json:"advisoryIDs"`

	// ApplyingPatchOn of task
	// Example: 2018-07-13
	// Format: date
	ApplyingPatchOn strfmt.Date `json:"applyingPatchOn,omitempty"`

	// Comment of task
	// Example: [{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"},{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"},{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"},{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"}]
	Comments []*TaskCommentResponseBody `json:"comments"`

	// created time of task
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// CVE ID of task
	// Example: CVE-2017-6799
	// Required: true
	CveID *string `json:"cveID"`

	// Key Value of CveID and Cvss of task
	// Example: {"Assumenda dolorem sed est.":"Tempore ea aperiam ipsum dolorem.","Aut molestias beatae et sed assumenda.":"Itaque iure illo maiores officia recusandae fugiat.","Nihil sint ea et.":"Et aut quasi consequatur sequi ex perspiciatis."}
	Cvss map[string]io.ReadCloser `json:"cvss,omitempty"`

	// DetectionMethod of task
	// Example: [{"name":"vuls","reliabilityScore":100},{"name":"vuls","reliabilityScore":100},{"name":"vuls","reliabilityScore":100},{"name":"vuls","reliabilityScore":100}]
	DetectionMethods []*DetectionMethodResponseBody `json:"detectionMethods"`

	// DetectionTools of task
	// Example: [{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"}]
	DetectionTools []*DetectionToolResponseBody `json:"detectionTools"`

	// ID of task
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Ignore of task
	// Example: true
	// Required: true
	Ignore *bool `json:"ignore"`

	// Ignore until of task
	// Example: vector
	IgnoreUntil string `json:"ignoreUntil,omitempty"`

	// MainUserID of task
	// Example: 1
	MainUserID int64 `json:"mainUserID,omitempty"`

	// MainUserName of task
	// Example: main-user-name
	MainUserName string `json:"mainUserName,omitempty"`

	// packageStatus of task
	// Example: {"bash":"resolved"}
	PackageStatuses map[string]string `json:"packageStatuses,omitempty"`

	// Pcakge And Cpe list of task
	// Example: [{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"},{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"},{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"},{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"}]
	PkgCpes []*PkgCpeChildResponseBody `json:"pkgCpes"`

	// Priority of task
	// Example: high
	// Required: true
	Priority *string `json:"priority"`

	// ServerRoleID of task
	// Example: 1
	// Required: true
	RoleID *int64 `json:"roleID"`

	// ServerRoleName of task
	// Example: server-role-name
	// Required: true
	RoleName *string `json:"roleName"`

	// server
	// Required: true
	Server *ServerChildResponseBody `json:"server"`

	// ServerID of task
	// Example: 1
	// Required: true
	ServerID *int64 `json:"serverID"`

	// Status of task
	// Example: new
	// Required: true
	Status *string `json:"status"`

	// SubUserID of task
	// Example: 1
	SubUserID int64 `json:"subUserID,omitempty"`

	// SubUserName of task
	// Example: sub-user-name
	SubUserName string `json:"subUserName,omitempty"`

	// updated time of task
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *TaskGetTaskDetailResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// advisoryIDs of cve
		// Example: ["advisoryID"]
		AdvisoryIDs []string `json:"advisoryIDs"`

		// ApplyingPatchOn of task
		// Example: 2018-07-13
		// Format: date
		ApplyingPatchOn strfmt.Date `json:"applyingPatchOn,omitempty"`

		// Comment of task
		// Example: [{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"},{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"},{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"},{"comment":"comment","createdAt":"2018-07-14T08:13:28Z","id":1,"type":"system","updatedAt":"2018-07-14T08:13:28Z","userID":1,"userName":"user-name"}]
		Comments []*TaskCommentResponseBody `json:"comments"`

		// created time of task
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		CreatedAt *strfmt.DateTime `json:"createdAt"`

		// CVE ID of task
		// Example: CVE-2017-6799
		// Required: true
		CveID *string `json:"cveID"`

		// Key Value of CveID and Cvss of task
		// Example: {"Assumenda dolorem sed est.":"Tempore ea aperiam ipsum dolorem.","Aut molestias beatae et sed assumenda.":"Itaque iure illo maiores officia recusandae fugiat.","Nihil sint ea et.":"Et aut quasi consequatur sequi ex perspiciatis."}
		Cvss map[string]io.ReadCloser `json:"cvss,omitempty"`

		// DetectionMethod of task
		// Example: [{"name":"vuls","reliabilityScore":100},{"name":"vuls","reliabilityScore":100},{"name":"vuls","reliabilityScore":100},{"name":"vuls","reliabilityScore":100}]
		DetectionMethods []*DetectionMethodResponseBody `json:"detectionMethods"`

		// DetectionTools of task
		// Example: [{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"},{"name":"changelog","patchAppliedAt":"2018-07-14T08:13:28Z"}]
		DetectionTools []*DetectionToolResponseBody `json:"detectionTools"`

		// ID of task
		// Example: 1
		// Required: true
		ID *int64 `json:"id"`

		// Ignore of task
		// Example: true
		// Required: true
		Ignore *bool `json:"ignore"`

		// Ignore until of task
		// Example: vector
		IgnoreUntil string `json:"ignoreUntil,omitempty"`

		// MainUserID of task
		// Example: 1
		MainUserID int64 `json:"mainUserID,omitempty"`

		// MainUserName of task
		// Example: main-user-name
		MainUserName string `json:"mainUserName,omitempty"`

		// packageStatus of task
		// Example: {"bash":"resolved"}
		PackageStatuses map[string]string `json:"packageStatuses,omitempty"`

		// Pcakge And Cpe list of task
		// Example: [{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"},{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"},{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"},{"affectedProcs":[{"name":"apache","pid":"12"},{"name":"apache","pid":"12"},{"name":"apache","pid":"12"}],"cpeID":1,"cpeURI":"cpe:2.3:a:clamav:clamav:*:*:*:*:*:*:*:*","createdAt":"2018-07-14T08:13:28Z","name":"package01","newRelease":"new release","newVersion":"2.0","pkgID":1,"release":"release","repository":"repository","serverID":1,"updatedAt":"2018-07-14T08:13:28Z","version":"1.0"}]
		PkgCpes []*PkgCpeChildResponseBody `json:"pkgCpes"`

		// Priority of task
		// Example: high
		// Required: true
		Priority *string `json:"priority"`

		// ServerRoleID of task
		// Example: 1
		// Required: true
		RoleID *int64 `json:"roleID"`

		// ServerRoleName of task
		// Example: server-role-name
		// Required: true
		RoleName *string `json:"roleName"`

		// server
		// Required: true
		Server *ServerChildResponseBody `json:"server"`

		// ServerID of task
		// Example: 1
		// Required: true
		ServerID *int64 `json:"serverID"`

		// Status of task
		// Example: new
		// Required: true
		Status *string `json:"status"`

		// SubUserID of task
		// Example: 1
		SubUserID int64 `json:"subUserID,omitempty"`

		// SubUserName of task
		// Example: sub-user-name
		SubUserName string `json:"subUserName,omitempty"`

		// updated time of task
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		UpdatedAt *strfmt.DateTime `json:"updatedAt"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AdvisoryIDs = props.AdvisoryIDs
	m.ApplyingPatchOn = props.ApplyingPatchOn
	m.Comments = props.Comments
	m.CreatedAt = props.CreatedAt
	m.CveID = props.CveID
	m.Cvss = props.Cvss
	m.DetectionMethods = props.DetectionMethods
	m.DetectionTools = props.DetectionTools
	m.ID = props.ID
	m.Ignore = props.Ignore
	m.IgnoreUntil = props.IgnoreUntil
	m.MainUserID = props.MainUserID
	m.MainUserName = props.MainUserName
	m.PackageStatuses = props.PackageStatuses
	m.PkgCpes = props.PkgCpes
	m.Priority = props.Priority
	m.RoleID = props.RoleID
	m.RoleName = props.RoleName
	m.Server = props.Server
	m.ServerID = props.ServerID
	m.Status = props.Status
	m.SubUserID = props.SubUserID
	m.SubUserName = props.SubUserName
	m.UpdatedAt = props.UpdatedAt
	return nil
}

// Validate validates this task get task detail response body
func (m *TaskGetTaskDetailResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplyingPatchOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionMethods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionTools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgnore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkgCpes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateApplyingPatchOn(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplyingPatchOn) { // not required
		return nil
	}

	if err := validate.FormatOf("applyingPatchOn", "body", "date", m.ApplyingPatchOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cveID", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateDetectionMethods(formats strfmt.Registry) error {
	if swag.IsZero(m.DetectionMethods) { // not required
		return nil
	}

	for i := 0; i < len(m.DetectionMethods); i++ {
		if swag.IsZero(m.DetectionMethods[i]) { // not required
			continue
		}

		if m.DetectionMethods[i] != nil {
			if err := m.DetectionMethods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("detectionMethods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("detectionMethods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateDetectionTools(formats strfmt.Registry) error {
	if swag.IsZero(m.DetectionTools) { // not required
		return nil
	}

	for i := 0; i < len(m.DetectionTools); i++ {
		if swag.IsZero(m.DetectionTools[i]) { // not required
			continue
		}

		if m.DetectionTools[i] != nil {
			if err := m.DetectionTools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("detectionTools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("detectionTools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateIgnore(formats strfmt.Registry) error {

	if err := validate.Required("ignore", "body", m.Ignore); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validatePkgCpes(formats strfmt.Registry) error {
	if swag.IsZero(m.PkgCpes) { // not required
		return nil
	}

	for i := 0; i < len(m.PkgCpes); i++ {
		if swag.IsZero(m.PkgCpes[i]) { // not required
			continue
		}

		if m.PkgCpes[i] != nil {
			if err := m.PkgCpes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pkgCpes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pkgCpes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("roleID", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateRoleName(formats strfmt.Registry) error {

	if err := validate.Required("roleName", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("serverID", "body", m.ServerID); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this task get task detail response body based on the context it is used
func (m *TaskGetTaskDetailResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetectionMethods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetectionTools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePkgCpes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskGetTaskDetailResponseBody) contextValidateComments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Comments); i++ {

		if m.Comments[i] != nil {
			if err := m.Comments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) contextValidateDetectionMethods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DetectionMethods); i++ {

		if m.DetectionMethods[i] != nil {
			if err := m.DetectionMethods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("detectionMethods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("detectionMethods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) contextValidateDetectionTools(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DetectionTools); i++ {

		if m.DetectionTools[i] != nil {
			if err := m.DetectionTools[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("detectionTools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("detectionTools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) contextValidatePkgCpes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PkgCpes); i++ {

		if m.PkgCpes[i] != nil {
			if err := m.PkgCpes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pkgCpes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pkgCpes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGetTaskDetailResponseBody) contextValidateServer(ctx context.Context, formats strfmt.Registry) error {

	if m.Server != nil {
		if err := m.Server.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskGetTaskDetailResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskGetTaskDetailResponseBody) UnmarshalBinary(b []byte) error {
	var res TaskGetTaskDetailResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecMetricResponseBody SecMetricResponseBody
//
// SecMetric describes a secMetric
// Example: {"ar":"","cr":"","createdAt":"2018-07-14T08:13:28Z","ir":"","roleID":1,"roleName":"roleName","updatedAt":"2018-07-14T08:13:28Z"}
//
// swagger:model SecMetricResponseBody
type SecMetricResponseBody struct {

	// AR of secMetric
	// Required: true
	Ar *string `json:"ar"`

	// CR of secMetric
	// Required: true
	Cr *string `json:"cr"`

	// created time
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// IR of secMetric
	// Required: true
	Ir *string `json:"ir"`

	// ServerRoleID of secMetric
	// Example: 1
	// Required: true
	RoleID *int64 `json:"roleID"`

	// ServerRoleName of secMetric
	// Example: roleName
	// Required: true
	RoleName *string `json:"roleName"`

	// updated time
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *SecMetricResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// AR of secMetric
		// Required: true
		Ar *string `json:"ar"`

		// CR of secMetric
		// Required: true
		Cr *string `json:"cr"`

		// created time
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		CreatedAt *strfmt.DateTime `json:"createdAt"`

		// IR of secMetric
		// Required: true
		Ir *string `json:"ir"`

		// ServerRoleID of secMetric
		// Example: 1
		// Required: true
		RoleID *int64 `json:"roleID"`

		// ServerRoleName of secMetric
		// Example: roleName
		// Required: true
		RoleName *string `json:"roleName"`

		// updated time
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		UpdatedAt *strfmt.DateTime `json:"updatedAt"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Ar = props.Ar
	m.Cr = props.Cr
	m.CreatedAt = props.CreatedAt
	m.Ir = props.Ir
	m.RoleID = props.RoleID
	m.RoleName = props.RoleName
	m.UpdatedAt = props.UpdatedAt
	return nil
}

// Validate validates this sec metric response body
func (m *SecMetricResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecMetricResponseBody) validateAr(formats strfmt.Registry) error {

	if err := validate.Required("ar", "body", m.Ar); err != nil {
		return err
	}

	return nil
}

func (m *SecMetricResponseBody) validateCr(formats strfmt.Registry) error {

	if err := validate.Required("cr", "body", m.Cr); err != nil {
		return err
	}

	return nil
}

func (m *SecMetricResponseBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecMetricResponseBody) validateIr(formats strfmt.Registry) error {

	if err := validate.Required("ir", "body", m.Ir); err != nil {
		return err
	}

	return nil
}

func (m *SecMetricResponseBody) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("roleID", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

func (m *SecMetricResponseBody) validateRoleName(formats strfmt.Registry) error {

	if err := validate.Required("roleName", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

func (m *SecMetricResponseBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sec metric response body based on context it is used
func (m *SecMetricResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecMetricResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecMetricResponseBody) UnmarshalBinary(b []byte) error {
	var res SecMetricResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

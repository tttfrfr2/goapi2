// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CveListResponseBody CveListResponseBody
// Example: {"advisoryIDs":["advisoryID"],"allTaskCount":100,"createdAt":"2018-07-14T08:13:28Z","cveID":"CVE-2018-1234","cwes":[{"cweID":"CWE-416","english":"english summary","japanese":"japanese summary","owaspTopTen2017":"10","sourceType":"nvd"},{"cweID":"CWE-416","english":"english summary","japanese":"japanese summary","owaspTopTen2017":"10","sourceType":"nvd"}],"hasExploit":true,"hasMitigation":true,"hasWorkaround":true,"isNotActive":true,"isOwaspTopTen2017":true,"maxV2":9,"maxV3":9,"newTaskCount":10,"scoreV2s":{"nvd":9,"redhat":7},"scoreV3s":{"nvd":8,"redhat":9},"title":"title","topicCount":10,"topicLastUpdatedAt":"2018-07-14T08:13:28Z","updatedAt":"2018-07-14T08:13:28Z","vectorV2s":{"jvn":"AV:L/AC:M/Au:N/C:C/I:N/A:N","nvd":"AV:L/AC:M/Au:N/C:C/I:N/A:N"},"vectorV3s":{"jvn":"AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N","nvd":"AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N"}}
//
// swagger:model CveListResponseBody
type CveListResponseBody struct {

	// advisoryIDs of cve
	// Example: ["advisoryID"]
	AdvisoryIDs []string `json:"advisoryIDs"`

	// AllTaskCount of cve
	// Example: 100
	// Required: true
	AllTaskCount *int64 `json:"allTaskCount"`

	// created time
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// Cve ID string of cve
	// Example: CVE-2018-1234
	// Required: true
	CveID *string `json:"cveID"`

	// cwes of cve
	// Example: [{"cweID":"CWE-416","english":"english summary","japanese":"japanese summary","owaspTopTen2017":"10","sourceType":"nvd"},{"cweID":"CWE-416","english":"english summary","japanese":"japanese summary","owaspTopTen2017":"10","sourceType":"nvd"}]
	// Required: true
	Cwes []*CweResponseBody `json:"cwes"`

	// hasExploit of cve
	// Example: true
	HasExploit bool `json:"hasExploit,omitempty"`

	// hasMitigation of cve
	// Example: true
	HasMitigation bool `json:"hasMitigation,omitempty"`

	// hasWorkaroundof cve
	// Example: true
	HasWorkaround bool `json:"hasWorkaround,omitempty"`

	// Flag of active cve
	// Example: true
	// Required: true
	IsNotActive *bool `json:"isNotActive"`

	// isOwaspTopTen2017 of cve
	// Example: true
	// Required: true
	IsOwaspTopTen2017 *bool `json:"isOwaspTopTen2017"`

	// maxV2 of cve
	// Example: 9
	// Required: true
	MaxV2 *float64 `json:"maxV2"`

	// maxV3 of cve
	// Example: 9
	// Required: true
	MaxV3 *float64 `json:"maxV3"`

	// NewTaskCount of cve
	// Example: 10
	// Required: true
	NewTaskCount *int64 `json:"newTaskCount"`

	// cvss v2 scores of cve
	// Example: {"nvd":9,"redhat":7}
	// Required: true
	ScoreV2s map[string]float64 `json:"scoreV2s"`

	// cvss v3 scores of cve
	// Example: {"nvd":8,"redhat":9}
	// Required: true
	ScoreV3s map[string]float64 `json:"scoreV3s"`

	// Title of cve
	// Example: title
	// Required: true
	Title *string `json:"title"`

	// topicCount of cve
	// Example: 10
	// Required: true
	TopicCount *int64 `json:"topicCount"`

	// topicLastUpdatedAt of cve
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	TopicLastUpdatedAt *strfmt.DateTime `json:"topicLastUpdatedAt"`

	// updated time
	// Example: 2018-07-14T08:13:28Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`

	// cvss v2 vectors of cve
	// Example: {"jvn":"AV:L/AC:M/Au:N/C:C/I:N/A:N","nvd":"AV:L/AC:M/Au:N/C:C/I:N/A:N"}
	// Required: true
	VectorV2s map[string]string `json:"vectorV2s"`

	// cvss v3 vectors of cve
	// Example: {"jvn":"AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N","nvd":"AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N"}
	// Required: true
	VectorV3s map[string]string `json:"vectorV3s"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CveListResponseBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// advisoryIDs of cve
		// Example: ["advisoryID"]
		AdvisoryIDs []string `json:"advisoryIDs"`

		// AllTaskCount of cve
		// Example: 100
		// Required: true
		AllTaskCount *int64 `json:"allTaskCount"`

		// created time
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		CreatedAt *strfmt.DateTime `json:"createdAt"`

		// Cve ID string of cve
		// Example: CVE-2018-1234
		// Required: true
		CveID *string `json:"cveID"`

		// cwes of cve
		// Example: [{"cweID":"CWE-416","english":"english summary","japanese":"japanese summary","owaspTopTen2017":"10","sourceType":"nvd"},{"cweID":"CWE-416","english":"english summary","japanese":"japanese summary","owaspTopTen2017":"10","sourceType":"nvd"}]
		// Required: true
		Cwes []*CweResponseBody `json:"cwes"`

		// hasExploit of cve
		// Example: true
		HasExploit bool `json:"hasExploit,omitempty"`

		// hasMitigation of cve
		// Example: true
		HasMitigation bool `json:"hasMitigation,omitempty"`

		// hasWorkaroundof cve
		// Example: true
		HasWorkaround bool `json:"hasWorkaround,omitempty"`

		// Flag of active cve
		// Example: true
		// Required: true
		IsNotActive *bool `json:"isNotActive"`

		// isOwaspTopTen2017 of cve
		// Example: true
		// Required: true
		IsOwaspTopTen2017 *bool `json:"isOwaspTopTen2017"`

		// maxV2 of cve
		// Example: 9
		// Required: true
		MaxV2 *float64 `json:"maxV2"`

		// maxV3 of cve
		// Example: 9
		// Required: true
		MaxV3 *float64 `json:"maxV3"`

		// NewTaskCount of cve
		// Example: 10
		// Required: true
		NewTaskCount *int64 `json:"newTaskCount"`

		// cvss v2 scores of cve
		// Example: {"nvd":9,"redhat":7}
		// Required: true
		ScoreV2s map[string]float64 `json:"scoreV2s"`

		// cvss v3 scores of cve
		// Example: {"nvd":8,"redhat":9}
		// Required: true
		ScoreV3s map[string]float64 `json:"scoreV3s"`

		// Title of cve
		// Example: title
		// Required: true
		Title *string `json:"title"`

		// topicCount of cve
		// Example: 10
		// Required: true
		TopicCount *int64 `json:"topicCount"`

		// topicLastUpdatedAt of cve
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		TopicLastUpdatedAt *strfmt.DateTime `json:"topicLastUpdatedAt"`

		// updated time
		// Example: 2018-07-14T08:13:28Z
		// Required: true
		// Format: date-time
		UpdatedAt *strfmt.DateTime `json:"updatedAt"`

		// cvss v2 vectors of cve
		// Example: {"jvn":"AV:L/AC:M/Au:N/C:C/I:N/A:N","nvd":"AV:L/AC:M/Au:N/C:C/I:N/A:N"}
		// Required: true
		VectorV2s map[string]string `json:"vectorV2s"`

		// cvss v3 vectors of cve
		// Example: {"jvn":"AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N","nvd":"AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N"}
		// Required: true
		VectorV3s map[string]string `json:"vectorV3s"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AdvisoryIDs = props.AdvisoryIDs
	m.AllTaskCount = props.AllTaskCount
	m.CreatedAt = props.CreatedAt
	m.CveID = props.CveID
	m.Cwes = props.Cwes
	m.HasExploit = props.HasExploit
	m.HasMitigation = props.HasMitigation
	m.HasWorkaround = props.HasWorkaround
	m.IsNotActive = props.IsNotActive
	m.IsOwaspTopTen2017 = props.IsOwaspTopTen2017
	m.MaxV2 = props.MaxV2
	m.MaxV3 = props.MaxV3
	m.NewTaskCount = props.NewTaskCount
	m.ScoreV2s = props.ScoreV2s
	m.ScoreV3s = props.ScoreV3s
	m.Title = props.Title
	m.TopicCount = props.TopicCount
	m.TopicLastUpdatedAt = props.TopicLastUpdatedAt
	m.UpdatedAt = props.UpdatedAt
	m.VectorV2s = props.VectorV2s
	m.VectorV3s = props.VectorV3s
	return nil
}

// Validate validates this cve list response body
func (m *CveListResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllTaskCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCwes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsNotActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsOwaspTopTen2017(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxV3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewTaskCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreV2s(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreV3s(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopicCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopicLastUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVectorV2s(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVectorV3s(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CveListResponseBody) validateAllTaskCount(formats strfmt.Registry) error {

	if err := validate.Required("allTaskCount", "body", m.AllTaskCount); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cveID", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateCwes(formats strfmt.Registry) error {

	if err := validate.Required("cwes", "body", m.Cwes); err != nil {
		return err
	}

	for i := 0; i < len(m.Cwes); i++ {
		if swag.IsZero(m.Cwes[i]) { // not required
			continue
		}

		if m.Cwes[i] != nil {
			if err := m.Cwes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cwes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cwes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CveListResponseBody) validateIsNotActive(formats strfmt.Registry) error {

	if err := validate.Required("isNotActive", "body", m.IsNotActive); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateIsOwaspTopTen2017(formats strfmt.Registry) error {

	if err := validate.Required("isOwaspTopTen2017", "body", m.IsOwaspTopTen2017); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateMaxV2(formats strfmt.Registry) error {

	if err := validate.Required("maxV2", "body", m.MaxV2); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateMaxV3(formats strfmt.Registry) error {

	if err := validate.Required("maxV3", "body", m.MaxV3); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateNewTaskCount(formats strfmt.Registry) error {

	if err := validate.Required("newTaskCount", "body", m.NewTaskCount); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateScoreV2s(formats strfmt.Registry) error {

	if err := validate.Required("scoreV2s", "body", m.ScoreV2s); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateScoreV3s(formats strfmt.Registry) error {

	if err := validate.Required("scoreV3s", "body", m.ScoreV3s); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateTopicCount(formats strfmt.Registry) error {

	if err := validate.Required("topicCount", "body", m.TopicCount); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateTopicLastUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("topicLastUpdatedAt", "body", m.TopicLastUpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("topicLastUpdatedAt", "body", "date-time", m.TopicLastUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateVectorV2s(formats strfmt.Registry) error {

	if err := validate.Required("vectorV2s", "body", m.VectorV2s); err != nil {
		return err
	}

	return nil
}

func (m *CveListResponseBody) validateVectorV3s(formats strfmt.Registry) error {

	if err := validate.Required("vectorV3s", "body", m.VectorV3s); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cve list response body based on the context it is used
func (m *CveListResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCwes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CveListResponseBody) contextValidateCwes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cwes); i++ {

		if m.Cwes[i] != nil {
			if err := m.Cwes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cwes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cwes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CveListResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CveListResponseBody) UnmarshalBinary(b []byte) error {
	var res CveListResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
